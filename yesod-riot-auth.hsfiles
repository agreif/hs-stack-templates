{-# START_FILE .dir-locals.el #-}
((haskell-mode . ((haskell-indent-spaces . 4)
                  (haskell-process-use-ghci . t)))
 (hamlet-mode . ((hamlet/basic-offset . 4)
                 (haskell-process-use-ghci . t))))

{-# START_FILE .gitignore #-}
dist*
static/tmp/
static/combined/
config/client_session_key.aes
*.hi
*.o
*.sqlite3
*.sqlite3-shm
*.sqlite3-wal
.hsenv*
cabal-dev/
.stack-work/
yesod-devel/
.cabal-sandbox
cabal.sandbox.config
.DS_Store
*.swp
*.keter
*~
\#*
*.cabal
context.json

{-# START_FILE README.md #-}
# Project specifics
   - yesod-postgres template
   - auth-hashdb
   - riot-js component-based UI library
   - UIkit front-end framework
   - model create and edit forms are generated
   - send email on user creation and password change by admin

# Screenshots
![Home](../screenshots/{{name}}/home.png)
![MyProfile-Edit](../screenshots/{{name}}/myprofile-edit.png)
![Admin-User](../screenshots/{{name}}/admin-user.png)
![Admin-Config](../screenshots/{{name}}/admin-config.png)

# Template installation
```
stack new my-project https://raw.githubusercontent.com/Greif-IT/hs-stack-templates/master/{{name}}.hsfiles
```

# Create PostgreSQL database (ubuntu)
```
sudo su postgres -c 'createuser --createdb --encrypted --no-inherit --login --pwprompt --no-createrole --no-superuser --no-replication my-project'
sudo su postgres -c 'createdb --encoding=UTF-8 --owner=my-project --template=template0 my-project'
```

# Run Yesod server
```
cd my-project
sh run_dev.sh
```
# Initialize admin user
only needed after the first start
```
curl http://localhost:3000/initdb/me@example.com
```

you can see the generated password in the yesod logs like
```
[Error] ###############################
[Error] admin login:         admin
[Error] admin password:      XpISNqkWAGFfrlryWxNzbtkvJzFkszVj
[Error] admin password hash: sha256|17|CPlYqS5DBuHSZRtbJjUasQ==|wptBAbVHgSSRnJJ+7X1P6PbsJcM+oZ+JaGjs1xVNJns=
[Error] admin email:         me@example.com
[Error] ###############################
```
thus the generated password of the 'admin' user in this sample is: XpISNqkWAGFfrlryWxNzbtkvJzFkszVj

# Generate new password hashes
normally you set the password on the browser while the server is running
but in case you have to reset them hard in the database
```
sh run_passwd.sh mySecretPassword78574
```

will generate the hash: sha256|17|sm/d6UdH7+nRXZt7bJaAeg==|HVpHzSBOHQPwZiqmfEHiCZZPZh4tFLQyEuDKsNdqcN0=

then you can update the apprpriate database row for the admin user or some other user

# Generate model code
most of the models are generated with the 'ginger' haskell templating engine.
In the haskell code you see the generator markers like
```haskell
-- gen data edit - start
data VEditConfig = VEditConfig
  { vEditConfigCode :: Maybe Text
  , vEditConfigStringValue :: Maybe Text
  , vEditConfigIntValue :: Maybe Int
  , vEditConfigDoubleValue :: Maybe Double
  , vEditConfigBoolValue :: Bool
  , vEditConfigVersion :: Int
  }
-- gen data edit - end
```


All model definitions and the ginger templates are in the hs-generator subproject.
If model definitions changed you can regenerate the haskell code with
```
cd my-project
sh run_gen.sh
```

# Original yesod README.md

## Database Setup

After installing Postgres, run:

```
createuser {{name}} --password {{name}} --superuser
createdb {{name}}
createdb {{name}}_test
```

## Haskell Setup

1. If you haven't already, [install Stack](https://haskell-lang.org/get-started)
	* On POSIX systems, this is usually `curl -sSL https://get.haskellstack.org/ | sh`
2. Install the `yesod` command line tool: `stack install yesod-bin --install-ghc`
3. Build libraries: `stack build`

If you have trouble, refer to the [Yesod Quickstart guide](https://www.yesodweb.com/page/quickstart) for additional detail.

## Development

Start a development server with:

```
stack exec -- yesod devel
```

As your code changes, your site will be automatically recompiled and redeployed to localhost.

## Tests

```
stack test --flag {{name}}:library-only --flag {{name}}:dev
```

(Because `yesod devel` passes the `library-only` and `dev` flags, matching those flags means you don't need to recompile between tests and development, and it disables optimization to speed up your test compile times).

## Documentation

* Read the [Yesod Book](https://www.yesodweb.com/book) online for free
* Check [Stackage](http://stackage.org/) for documentation on the packages in your LTS Haskell version, or [search it using Hoogle](https://www.stackage.org/lts/hoogle?q=). Tip: Your LTS version is in your `stack.yaml` file.
* For local documentation, use:
	* `stack haddock --open` to generate Haddock documentation for your dependencies, and open that documentation in a browser
	* `stack hoogle <function, module or type signature>` to generate a Hoogle database and search for your query
* The [Yesod cookbook](https://github.com/yesodweb/yesod-cookbook) has sample code for various needs

## Getting Help

* Ask questions on [Stack Overflow, using the Yesod or Haskell tags](https://stackoverflow.com/questions/tagged/yesod+haskell)
* Ask the [Yesod Google Group](https://groups.google.com/forum/#!forum/yesodweb)
* There are several chatrooms you can ask for help:
	* For IRC, try Freenode#yesod and Freenode#haskell
	* [Functional Programming Slack](https://fpchat-invite.herokuapp.com/), in the #haskell, #haskell-beginners, or #yesod channels.

{-# START_FILE app/DevelMain.hs #-}
-- | Running your app inside GHCi.
--
-- To start up GHCi for usage with Yesod, first make sure you are in dev mode:
--
-- > cabal configure -fdev
--
-- Note that @yesod devel@ automatically sets the dev flag.
-- Now launch the repl:
--
-- > cabal repl --ghc-options="-O0 -fobject-code"
--
-- To start your app, run:
--
-- > :l DevelMain
-- > DevelMain.update
--
-- You can also call @DevelMain.shutdown@ to stop the app
--
-- You will need to add the foreign-store package to your .cabal file.
-- It is very light-weight.
--
-- If you don't use cabal repl, you will need
-- to run the following in GHCi or to add it to
-- your .ghci file.
--
-- :set -DDEVELOPMENT
--
-- There is more information about this approach,
-- on the wiki: https://github.com/yesodweb/yesod/wiki/ghci

module DevelMain where

import Prelude
import Application (getApplicationRepl, shutdownApp)

import Control.Exception (finally)
import Control.Monad ((>=>))
import Control.Concurrent
import Data.IORef
import Foreign.Store
import Network.Wai.Handler.Warp
import GHC.Word

-- | Start or restart the server.
-- newStore is from foreign-store.
-- A Store holds onto some data across ghci reloads
update :: IO ()
update = do
    mtidStore <- lookupStore tidStoreNum
    case mtidStore of
      -- no server running
      Nothing -> do
          done <- storeAction doneStore newEmptyMVar
          tid <- start done
          _ <- storeAction (Store tidStoreNum) (newIORef tid)
          return ()
      -- server is already running
      Just tidStore -> restartAppInNewThread tidStore
  where
    doneStore :: Store (MVar ())
    doneStore = Store 0

    -- shut the server down with killThread and wait for the done signal
    restartAppInNewThread :: Store (IORef ThreadId) -> IO ()
    restartAppInNewThread tidStore = modifyStoredIORef tidStore $ \tid -> do
        killThread tid
        withStore doneStore takeMVar
        readStore doneStore >>= start


    -- | Start the server in a separate thread.
    start :: MVar () -- ^ Written to when the thread is killed.
          -> IO ThreadId
    start done = do
        (port, site, app) <- getApplicationRepl
        forkIO (finally (runSettings (setPort port defaultSettings) app)
                        -- Note that this implies concurrency
                        -- between shutdownApp and the next app that is starting.
                        -- Normally this should be fine
                        (putMVar done () >> shutdownApp site))

-- | kill the server
shutdown :: IO ()
shutdown = do
    mtidStore <- lookupStore tidStoreNum
    case mtidStore of
      -- no server running
      Nothing -> putStrLn "no Yesod app running"
      Just tidStore -> do
          withStore tidStore $ readIORef >=> killThread
          putStrLn "Yesod app is shutdown"

tidStoreNum :: Word32
tidStoreNum = 1

modifyStoredIORef :: Store (IORef a) -> (a -> IO a) -> IO ()
modifyStoredIORef store f = withStore store $ \ref -> do
    v <- readIORef ref
    f v >>= writeIORef ref

{-# START_FILE app/devel.hs #-}
{-# LANGUAGE PackageImports #-}
import "{{name}}" Application (develMain)
import Prelude (IO)

main :: IO ()
main = develMain

{-# START_FILE app/main.hs #-}
import Prelude     (IO)
import Application (appMain)

main :: IO ()
main = appMain

{-# START_FILE app/passwd.hs #-}
import Prelude
import System.Environment
import Control.Monad
import Data.Text
import qualified Crypto.PasswordStore as Crypto
import qualified Data.ByteString.Char8 as BSC
import Data.Text.Encoding

main :: IO ()
main = do
  args <- getArgs
  forM_ args $ \arg -> do
    crypted <- cryptoHashText $ pack arg
    putStrLn $ unpack crypted

cryptoHashText :: Text -> IO Text
cryptoHashText text = do
  strHash <- Crypto.makePassword (BSC.pack $ unpack text) 17
  return $ decodeUtf8 strHash

{-# START_FILE BASE64 config/favicon.ico #-}
AAABAAIAEBAAAAEAIABoBAAAJgAAABAQAgABAAEAsAAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAApl4sAAAAAAAAAAAAAAAAAUEpGyNpSjaIg2NO2ZBvWfqTc13/
jW1X9YNhTMZrSTNkUTMfDwAAAAAAAAAAAAAAAAAAAAAAAAAANR0NClk6JmF+W0Txj2xV/41qVP+M
aVP/jGlS/4xpUv+MaVL/i2dQ/3pVPdNeOiEzQRsBAgAAAAAAAAAAMBgHAlIxG1h5UDb/h15D9n5W
PPZ4TzXmeVE303hQNtV4UDbVeFA11XdQNdV5UTfbbUUpx1UsEBgAAAAAAAAFADIVAwlULxY/f1M1
4dOffryecFHMXTIVhAAAAAURAAAOEwAADxQAAA8TAAAPEAAADigEABFNJAkZTSQJCRAHAQdKIARt
OxUAC1kvE3qQYEDfzJt5wXtOL9pQJAa0UScKjVInCo1SJwqNUSYJjVElCY1RJQmLUSUHslEjBGcu
EgAuVSQC/00eAGAYAAAPXzAQuLGAXs6ygV/PYTESwkMXAFRGHgI3Rx4BPEceATxHHQE7RBsBMkwf
AqlUIQHgQhoAaVUhAP9TIQDhSBwAI0EXAD5xQSHbzJp4wJRiQtBRIgKuRxsAb0kdAGpJHQBqSR0A
e04fAJNJHQClVCEA/0YcAIRVIgD/VSIA7E0fADQyDQAyaToa1MqXdMLJl3bBc0Ii6UscAJFFGgBE
RRoAQUIZAFlRIADpVSIA/1UiAP9JHwN9WicG/1QhAIMAAAAMVywPoaBtTNi6imnEsIBfya9+Xc1m
OBm2UycIilgqDYVVKQ2DVigJ4FwqCf5cKgr/Qx8GUGAwEc08EwAPTSgQY4dXN+LPnXy9g1c54XtM
LevJl3a/k2RE3WY5Gv9mNxn/Zjga/2c5G/9oOhz/Zzka/DQYBRFZLRA1JhAAJHhML9XJlnTCqXxe
zXFHLPtxRyv/n3BR2MuZd7uFWjzmc0gt/nRKLv90Sy//dUww/21CJcIAAAAATCsURXRONdR+Vjr5
j2ZL5oJbQfN+Vz3/flg//4NcQfePZkrogVk/8n5YP/6BW0H/gVtD/oBaQf9qQCRIJAgAAFAxHRt4
VDzVjWpS/4lmT/6LZ1D/jGlS/4xpU/6MaVL/i2hS/otpUv6Na1T+jmtV/o9tV/98Vj2cYzoeBgAA
AAAGAgAAZ0cyMIVkTtqae2f/mXpm/5l5Zf6Zemb+mXpm/5p6Zv+ae2f+mnxp/5p7Z/+HZE2qdE84
FAAAAAAAAAAAAAAAAAAAAABrTDgfhWVQnp2Abf+njHv/pot6/6aMev+njHv/qI18/5t+avOHZU9y
fFc/DgAAAAAAAAAAJhABAAAAAAAAAAAAyqmXADYdCQNoSDQjh2hUbpd6aJ+Zfmurl3pnlYZkTlpw
TDYTX0IxAbNeMwAAAAAAsoFfAPgfAADwBwAA4AMAAOH/AADwAQAAsPwAAJh4AAAYOAAAkAAAALAA
AADgAAAAwAEAAMABAADgAwAA8A8AAP4/AAAoAAAAEAAAACAAAAABAAEAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==

{-# START_FILE config/keter.yml #-}
# After you've edited this file, remove the following line to allow
# `yesod keter` to build your bundle.
user-edited: false

# A Keter app is composed of 1 or more stanzas. The main stanza will define our
# web application. See the Keter documentation for more information on
# available stanzas.
stanzas:

  # Your Yesod application.
  - type: webapp

    # Name of your executable. You are unlikely to need to change this.
    # Note that all file paths are relative to the keter.yml file.
    #
    # The path given is for Stack projects. If you're still using cabal, change
    # to
    # exec: ../dist/build/{{name}}/{{name}}
    exec: ../dist/bin/{{name}}

    # Command line options passed to your application.
    args: []

    hosts:
      # You can specify one or more hostnames for your application to respond
      # to. The primary hostname will be used for generating your application
      # root.
      - www.{{name}}.com

    # Enable to force Keter to redirect to https
    # Can be added to any stanza
    requires-secure: false

  # Static files.
  - type: static-files
    hosts:
      - static.{{name}}.com
    root: ../static

    # Uncomment to turn on directory listings.
    # directory-listing: true

  # Redirect plain domain name to www.
  - type: redirect

    hosts:
      - {{name}}.com
    actions:
      - host: www.{{name}}.com
        # secure: false
        # port: 80

    # Uncomment to switch to a non-permanent redirect.
    # status: 303

# Use the following to automatically copy your bundle upon creation via `yesod
# keter`. Uses `scp` internally, so you can set it to a remote destination
# copy-to: user@host:/opt/keter/incoming/

# You can pass arguments to `scp` used above. This example limits bandwidth to
# 1024 Kbit/s and uses port 2222 instead of the default 22
# copy-to-args:
#   - "-l 1024"
#   - "-P 2222"

# If you would like to have Keter automatically create a PostgreSQL database
# and set appropriate environment variables for it to be discovered, uncomment
# the following line.
# plugins:
#   postgres: true

{-# START_FILE config/models_migrate #-}
-- gen models - start


User
    ident Text
    password Text Maybe
    email Text
    version Int
    createdAt UTCTime
    createdBy Text
    updatedAt UTCTime
    updatedBy Text
    UniqueUser ident


UserHistory
    Id sql=vid
    id Int MigrationOnly
    ident Text
    password Text Maybe
    email Text
    version Int
    createdAt UTCTime
    createdBy Text
    updatedAt UTCTime
    updatedBy Text

Config json
    code Text
    stringValue Text Maybe
    intValue Int Maybe
    doubleValue Double Maybe
    boolValue Bool
    version Int
    createdAt UTCTime
    createdBy Text
    updatedAt UTCTime
    updatedBy Text
    UniqueCode code


ConfigHistory
    Id sql=vid
    id Int MigrationOnly
    code Text
    stringValue Text Maybe
    intValue Int Maybe
    doubleValue Double Maybe
    boolValue Bool
    version Int
    createdAt UTCTime
    createdBy Text
    updatedAt UTCTime
    updatedBy Text

-- gen models - end

{-# START_FILE config/models_nomigrate #-}

{-# START_FILE config/robots.txt #-}
User-agent: *

{-# START_FILE config/routes #-}
-- By default this file is used by `parseRoutesFile` in Foundation.hs
-- Syntax for this file here: https://www.yesodweb.com/book/routing-and-handlers

/static StaticR Static appStatic
/auth   AuthR   Auth   getAuth

/favicon.ico FaviconR GET
/robots.txt RobotsR GET

/ HomeR GET
/initdb/#Text InitDbR GET

/myproject MyprojectR:
  home MyprojectHomeR GET
  -- populatedb PopulateDbR GET
  riotTags RiotTagsR GET

  homePageDataJson HomePageDataJsonR GET

  admin AdminR GET
  adminPageDataJson AdminPageDataJsonR GET

  addUserForm AddUserFormR GET
  addUser AddUserR POST
  editUserForm/#UserId EditUserFormR GET
  editUser/#UserId EditUserR POST
  deleteUserForm/#UserId DeleteUserFormR GET
  deleteUser/#UserId DeleteUserR POST

  editConfigForm/#ConfigId EditConfigFormR GET
  editConfig/#ConfigId EditConfigR POST

  editMyProfileForm EditMyprofileFormR GET
  editMyProfile EditMyprofileR POST

{-# START_FILE config/settings.yml #-}
# Values formatted like "_env:ENV_VAR_NAME:default_value" can be overridden by the specified environment variable.
# See https://github.com/yesodweb/yesod/wiki/Configuration#overriding-configuration-values-with-environment-variables

static-dir:     "_env:STATIC_DIR:static"
host:           "_env:HOST:*4" # any IPv4 host
port:           "_env:PORT:3000" # NB: The port `yesod devel` uses is distinct from this value. Set the `yesod devel` port from the command line.
ip-from-header: "_env:IP_FROM_HEADER:false"

# Default behavior: determine the application root from the request headers.
# Uncomment to set an explicit approot
approot:        "_env:APPROOT:http://localhost:3000"

# By default, `yesod devel` runs in development, and built executables use
# production settings (see below). To override this, use the following:
#
# development: false

# Optional values with the following production defaults.
# In development, they default to the inverse.
#
# detailed-logging: false
# should-log-all: false
# reload-templates: false
# mutable-static: false
# skip-combining: false
# auth-dummy-login : false

# NB: If you need a numeric value (e.g. 123) to parse as a String, wrap it in single quotes (e.g. "_env:PGPASS:'123'")
# See https://github.com/yesodweb/yesod/wiki/Configuration#parsing-numeric-values-as-strings

database:
  user:     "_env:PGUSER:{{name}}"
  password: "_env:PGPASS:{{name}}"
  host:     "_env:PGHOST:localhost"
  port:     "_env:PGPORT:5432"
  # See config/test-settings.yml for an override during tests
  database: "_env:PGDATABASE:{{name}}"
  poolsize: "_env:PGPOOLSIZE:10"

#copyright: Insert copyright statement here
#analytics: UA-YOURCODE

{-# START_FILE config/test-settings.yml #-}
database:
  # NOTE: By design, this setting prevents the PGDATABASE environment variable
  # from affecting test runs, so that we don't accidentally affect the
  # production database during testing. If you're not concerned about that and
  # would like to have environment variable overrides, you could instead use
  # something like:
  #
  #   database: "_env:PGDATABASE:{{name}}_test"
  database: {{name}}_test

auth-dummy-login: true

{-# START_FILE hs-generator/LICENSE #-}
Copyright Author name here (c) 2018

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of Author name here nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
{-# START_FILE hs-generator/README.md #-}
# hs-generator

{-# START_FILE hs-generator/Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE BASE64 hs-generator/ginger.tar #-}
Z2luZ2VyLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA3NTUAMDAwMTc1
MAAwMDAxNzUwADAwMDAwMDAwMDAwADEzMjUxMDI3NzA3ADAxMTYxMQAgNQAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABn
aW5nZXIvaGFuZGxlcl9wb3N0X2FkZF9mb3JtLmd0bXBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAwMDAxNzUw
ADAwMDE3NTAAMDAwMDAwMDMxMjAAMTMyNTEwMTY2NDUAMDE3MTY2ACAwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAYWdyZWlmAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHsl
IGluY2x1ZGUgJ21hY3Jvcy5ndG1wbCcgLSV9Cgpwb3N0QWRke3ttb2RlbC5uYW1lQ2FwfX1SIDo6
IHt7IG1vZGVsLnBhcmVudEhzVHlwZSA/IG1vZGVsLnBhcmVudEhzVHlwZSB+ICdJZCAtPiAnIDog
JycgLX19IEhhbmRsZXIgVmFsdWUKcG9zdEFkZHt7bW9kZWwubmFtZUNhcH19UiB7eyBtb2RlbC5w
YXJlbnRIc1BhcmFtSWQgPyBtb2RlbC5wYXJlbnRIc1BhcmFtSWQgfiAnICcgOiAnJyAtfX0gPSBk
bwogICgocmVzdWx0LCBmb3JtV2lkZ2V0KSwgXykgPC0gcnVuRm9ybVBvc3QgJCB2QWRke3ttb2Rl
bC5uYW1lQ2FwfX1Gb3JtIE5vdGhpbmcKICBjYXNlIHJlc3VsdCBvZgogICAgRm9ybVN1Y2Nlc3Mg
dkFkZHt7bW9kZWwubmFtZUNhcH19IC0+IGRvCiAgICAgIGN1clRpbWUgPC0gbGlmdElPIGdldEN1
cnJlbnRUaW1lCiAgICAgIEVudGl0eSBfIGF1dGhVc2VyIDwtIHJlcXVpcmVBdXRoCiAgICAgIHVy
bFJlbmRlcmVyIDwtIGdldFVybFJlbmRlcgogICAgICBsZXQge3ttb2RlbC5uYW1lfX0gPSB7e21v
ZGVsLm5hbWVDYXB9fQogICAgICAgICAgICB7CiAgICAgICAgICAgIHt7LSBtb2RlbC5wYXJlbnRI
c1R5cGUgPyAnICcgfiBtb2RlbC5uYW1lIH4gbW9kZWwucGFyZW50SHNUeXBlIH4gJ0lkID0gJyB+
IG1vZGVsLnBhcmVudEhzUGFyYW1JZCB+ICcsJyA6ICcnIH19CiAgICAgICAgeyUtIGZvciBmaWVs
ZCBpbiBtb2RlbC5kYlVwZGF0YWJsZUZpZWxkcyAlfQogICAgICAgIHslLSBpZiBmaWVsZC5hZGRW
aWV3ICV9CiAgICAgICAgICAgIHt7cHJlZml4Q29tbWFVbmxlc3NMb29wRmlyc3QoKX19e3ttb2Rl
bC5uYW1lfX17e2ZpZWxkLm5hbWVDYXB9fSA9IHZBZGR7e21vZGVsLm5hbWVDYXB9fXt7ZmllbGQu
bmFtZUNhcH19IHZBZGR7e21vZGVsLm5hbWVDYXB9fQogICAgICAgIHslLSBlbmRpZiAtJX0KICAg
ICAgICB7JS0gZW5kZm9yICV9CiAgICAgICAgICAgIHt7IG1vZGVsLmRiVXBkYXRhYmxlRmllbGRz
IHx8IGZpZWxkLmFkZFZpZXcgPyAnLCAnIDogJyd9fQogICAgICAgICAgICB7ey0gbW9kZWwubmFt
ZX19VmVyc2lvbiA9IDEKICAgICAgICAgICAgLCB7e21vZGVsLm5hbWV9fUNyZWF0ZWRBdCA9IGN1
clRpbWUKICAgICAgICAgICAgLCB7e21vZGVsLm5hbWV9fUNyZWF0ZWRCeSA9IHVzZXJJZGVudCBh
dXRoVXNlcgogICAgICAgICAgICAsIHt7bW9kZWwubmFtZX19VXBkYXRlZEF0ID0gY3VyVGltZQog
ICAgICAgICAgICAsIHt7bW9kZWwubmFtZX19VXBkYXRlZEJ5ID0gdXNlcklkZW50IGF1dGhVc2Vy
CiAgICAgICAgICAgIH0KICAgICAgXyA8LSBydW5EQiAkIGluc2VydCB7e21vZGVsLm5hbWV9fQog
ICAgICByZXR1cm5Kc29uICQgVkZvcm1TdWJtaXRTdWNjZXNzIHsgZnNTdWNjZXNzRGF0YUpzb25V
cmwgPSB1cmxSZW5kZXJlciAkIHt7bW9kZWwuYWRkRm9ybURhdGFKc29uVXJsfX0gfQogICAgXyAt
PiBkbwogICAgICByZXN1bHRIdG1sIDwtIGZvcm1MYXlvdXQgW3doYW1sZXR8Xntmb3JtV2lkZ2V0
fXxdCiAgICAgIHJldHVybkpzb24gJCBWRm9ybVN1Ym1pdEludmFsaWQKICAgICAgICB7IGZzSW52
YWxpZE1vZGFsV2lkZ2V0SHRtbCA9IHRvU3RyaWN0ICQgQmxhemUucmVuZGVySHRtbCByZXN1bHRI
dG1sIH0KCnt7LSAnJyAtfX0KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2luZ2Vy
L2hhbmRsZXJfZGF0YV9hZGQuZ3RtcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQAMDAwMTc1MAAwMDAx
NzUwADAwMDAwMDAwNjczADEzMjUxMDE2NjQ1ADAxNjEwMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7JSBpbmNs
dWRlICdtYWNyb3MuZ3RtcGwnIC0lfQoKZGF0YSBWQWRke3ttb2RlbC5uYW1lQ2FwfX0gPSBWQWRk
e3ttb2RlbC5uYW1lQ2FwfX0KICB7IHt7Jyd9fQogIHslLSBmb3IgZmllbGQgaW4gbW9kZWwuYWRk
Vmlld0ZpZWxkcyAtJX0KICAgIHt7Y29uY2F0KCJ2QWRkIiwgbW9kZWwubmFtZUNhcCwgZmllbGQu
bmFtZUNhcCwgIiA6OiAiLCBmaWVsZC5hZGRWaWV3LmlzUmVxdWlyZWQgPyAnJyA6ICdNYXliZSAn
LCBmaWVsZC5oc1R5cGUpfHByZWZpeENvbW1hVW5sZXNzTG9vcEZpcnN0fX0KICB7JSBlbmRmb3Ig
LSV9CiAgfQogIHslLSBpZiBtb2RlbC5oc0Rlcml2aW5ncyAlfQogICAgZGVyaXZpbmcgeyUtIGZv
ciBoc0Rlcml2aW5nIGluIG1vZGVsLmhzRGVyaXZpbmdzICV9IHt7aHNEZXJpdmluZ319eyUtIGVu
ZGZvciAlfQogIHslLSBlbmRpZiAtJX0KCgp7ey0gJycgLX19CgAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGdpbmdlci9o
YW5kbGVyX2RlbGV0ZV9mb3JtLmd0bXBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwNjQ0ADAwMDE3NTAAMDAwMTc1
MAAwMDAwMDAwMDM2NAAxMzI1MTAxNjY0NQAwMTY2NDIAIDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIgIABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdkRlbGV0ZXt7
bW9kZWwubmFtZUNhcH19Rm9ybSA6OiBIdG1sIC0+IE1Gb3JtIEhhbmRsZXIgKEZvcm1SZXN1bHQg
KCksIFdpZGdldCkKdkRlbGV0ZXt7bW9kZWwubmFtZUNhcH19Rm9ybSBleHRyYSA9IGRvCiAgbGV0
IGZvcm1SZXN1bHQgPSBtZW1wdHkKICBsZXQgZm9ybVdpZGdldCA9IFt3aGFtbGV0fCN7ZXh0cmF9
IFJlYWxseSBkZWxldGU/fF0KICByZXR1cm4gKGZvcm1SZXN1bHQsIGZvcm1XaWRnZXQpCgp7ey0g
JycgLX19CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABnaW5nZXIvZGVi
dWdfanNvbi5ndG1wbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAwMDAxNzUwADAwMDE3NTAA
MDAwMDAwMDAwMjMAMTMyNTEwMjc3MDcAMDE0NzcwACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHt7IGpzb24obW9k
ZWxzKSB9fQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2luZ2VyL2hhbmRs
ZXJfZ2V0X2RlbGV0ZV9mb3JtLmd0bXBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQAMDAwMTc1MAAwMDAxNzUwADAw
MDAwMDAxMTQ2ADEzMzE1NzE0NjA1ADAxNzUwMgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
YWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7JSBpbmNsdWRlICdt
YWNyb3MuZ3RtcGwnIC0lfQoKZ2V0RGVsZXRle3ttb2RlbC5uYW1lQ2FwfX1Gb3JtUiA6OiB7e21v
ZGVsLm5hbWVDYXB9fUlkIC0+IEhhbmRsZXIgSHRtbApnZXREZWxldGV7e21vZGVsLm5hbWVDYXB9
fUZvcm1SIHt7bW9kZWwubmFtZX19SWQgPSBkbwogIHslIGlmIG1vZGVsLmRlbGV0ZUZvcm1FbnRp
dHlMb2FkZXIgLSV9CiAge3sgbW9kZWwuZGVsZXRlRm9ybUVudGl0eUxvYWRlciB9fQogIHslIGVu
ZGlmIC0lfQogIChmb3JtV2lkZ2V0LCBfKSA8LSBnZW5lcmF0ZUZvcm1Qb3N0ICQgdkRlbGV0ZXt7
bW9kZWwubmFtZUNhcH19Rm9ybQogIGZvcm1MYXlvdXQgJCBkbwogICAgdG9XaWRnZXQgW3doYW1s
ZXR8CiAgICAgIDxoMT5EZWxldGUge3ttb2RlbC5sYWJlbH19CiAgICAgIDxmb3JtICNtb2RhbC1m
b3JtIC51ay1mb3JtLWhvcml6b250YWwgbWV0aG9kPXBvc3QgYWN0aW9uPXt7c2hha2VzVXJsKCdN
eXByb2plY3RSICQgRGVsZXRlJyB+IG1vZGVsLm5hbWVDYXAgfiAnUiAnIH4gbW9kZWwubmFtZSB+
ICdJZCcpfX0+CiAgICAgICAgPGRpdiAjbW9kYWwtZm9ybS13aWRnZXQ+CiAgICAgICAgICBee2Zv
cm1XaWRnZXR9CiAgICAgIHxdCgp7ey0gJycgLX19CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2luZ2VyL2hhbmRsZXJf
Z2V0X2FkZF9mb3JtLmd0bXBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQAMDAwMTc1MAAwMDAxNzUwADAwMDAw
MDAyMTY2ADEzMzE1NzE0NjYzADAxNjc3NwAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYWdy
ZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7JSBpbmNsdWRlICdtYWNy
b3MuZ3RtcGwnIC0lfQoKZ2V0QWRke3ttb2RlbC5uYW1lQ2FwfX1Gb3JtUiA6OiB7eyBtb2RlbC5w
YXJlbnRIc1R5cGUgPyBtb2RlbC5wYXJlbnRIc1R5cGUgfiAnSWQgLT4gJyA6ICcnIC19fSBIYW5k
bGVyIEh0bWwKZ2V0QWRke3ttb2RlbC5uYW1lQ2FwfX1Gb3JtUiB7eyBtb2RlbC5wYXJlbnRIc1Bh
cmFtSWQgPyBtb2RlbC5wYXJlbnRIc1BhcmFtSWQgfiAnICcgOiAnJyAtfX0gPSBkbwogIHslIGlm
IG1vZGVsLmFkZEZvcm1IYXNEZWZhdWx0TW9kZWwgLSV9CiAgZGVmYXVsdEFkZE1vZGVsIDwtIGRl
ZmF1bHRBZGR7e21vZGVsLm5hbWVDYXB9fXt7IG1vZGVsLnBhcmVudEhzUGFyYW1JZCA/ICcgJyB+
IG1vZGVsLnBhcmVudEhzUGFyYW1JZCA6ICcnIH19CiAgeyUgZW5kaWYgLSV9CiAgeyUgaWYgbW9k
ZWwuYWRkRm9ybUVudGl0eUxvYWRlciAtJX0KICB7eyBtb2RlbC5hZGRGb3JtRW50aXR5TG9hZGVy
IH19CiAgeyUgZWxzZSAlfQogIHslLSBlbmRpZiAtJX0KICAoZm9ybVdpZGdldCwgXykgPC0gZ2Vu
ZXJhdGVGb3JtUG9zdCAkIHZBZGR7e21vZGVsLm5hbWVDYXB9fUZvcm0ge3sgbW9kZWwuYWRkRm9y
bUhhc0RlZmF1bHRNb2RlbCA/ICckIEp1c3QgZGVmYXVsdEFkZE1vZGVsJyA6ICdOb3RoaW5nJ319
CiAgZm9ybUxheW91dCAkIGRvCiAgICB0b1dpZGdldCBbd2hhbWxldHwKICAgICAgPGgxPkFkZCB7
e21vZGVsLmxhYmVsfX0KICAgICAgPGZvcm0gI21vZGFsLWZvcm0gLnVrLWZvcm0taG9yaXpvbnRh
bCBtZXRob2Q9cG9zdCBvbnN1Ym1pdD0icmV0dXJuIGZhbHNlOyIgYWN0aW9uPXt7c2hha2VzVXJs
KCdNeXByb2plY3RSICQgQWRkJyB+IG1vZGVsLm5hbWVDYXAgfiAnUicgfiAobW9kZWwucGFyZW50
SHNQYXJhbUlkID8gJyAnIH4gbW9kZWwucGFyZW50SHNQYXJhbUlkIDogJycpKX19PgogICAgICAg
IDxkaXYgI21vZGFsLWZvcm0td2lkZ2V0PgogICAgICAgICAgXntmb3JtV2lkZ2V0fQogICAgICB7
JSBpZiBtb2RlbC5mb3JtSGFzUHJvZ3Jlc3NCYXIgLSV9CiAgICAgIDxwcm9ncmVzcyBpZD0ibW9k
YWwtZm9ybS1wcm9ncmVzc2JhciIgY2xhc3M9InVrLXByb2dyZXNzIiB2YWx1ZT0iMCIgbWF4PSIw
Ij4KICAgICAgeyUgZW5kaWYgLSV9CiAgICAgIHxdCgp7ey0gJycgLX19CgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABnaW5nZXIvaGFuZGxlcl9jb21t
b25faTE4bi5ndG1wbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAwMDAxNzUwADAwMDE3NTAAMDAwMDAwMDEz
NzAAMTMyNTEwMTY2NDUAMDE2NTAyACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAHVzdGFyICAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhZ3JlaWYA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHslIGluY2x1ZGUgJ21hY3Jvcy5n
dG1wbCcgLSV9CgpkYXRhIE1zZ0dsb2JhbCA9CnslLSBmb3IgdHJhbnNsYXRpb24gaW4gdHJhbnNs
YXRpb25zICV9CiAge3soJ01zZ0dsb2JhbCcgfiB0cmFuc2xhdGlvbi5rZXlDYXApfHByZWZpeEd1
YXJkVW5sZXNzTG9vcExhc3QgLX19CnslLSBlbmRmb3IgJX0KCmluc3RhbmNlIFJlbmRlck1lc3Nh
Z2UgQXBwIE1zZ0dsb2JhbCB3aGVyZQogIHJlbmRlck1lc3NhZ2UgXyBbXSAgICAgICAgPSByZW5k
ZXJHbG9iYWxHZXJtYW4KICByZW5kZXJNZXNzYWdlIF8gKCJkZSI6XykgPSByZW5kZXJHbG9iYWxH
ZXJtYW4KICByZW5kZXJNZXNzYWdlIF8gKCJlbi1VUyI6XykgPSByZW5kZXJHbG9iYWxFbmdsaXNo
CiAgcmVuZGVyTWVzc2FnZSBtIChfICAgOmxzKSA9IHJlbmRlck1lc3NhZ2UgbSBscwoKcmVuZGVy
R2xvYmFsR2VybWFuIDo6IE1zZ0dsb2JhbCAtPiBUZXh0CnslLSBmb3IgdHJhbnNsYXRpb24gaW4g
dHJhbnNsYXRpb25zICV9CnJlbmRlckdsb2JhbEdlcm1hbiB7eydNc2dHbG9iYWwnIH4gdHJhbnNs
YXRpb24ua2V5Q2FwfX0gPSAie3t0cmFuc2xhdGlvbi5kZX19Igp7JS0gZW5kZm9yICV9CgpyZW5k
ZXJHbG9iYWxFbmdsaXNoIDo6IE1zZ0dsb2JhbCAtPiBUZXh0CnslLSBmb3IgdHJhbnNsYXRpb24g
aW4gdHJhbnNsYXRpb25zICV9CnJlbmRlckdsb2JhbEVuZ2xpc2gge3snTXNnR2xvYmFsJyB+IHRy
YW5zbGF0aW9uLmtleUNhcH19ID0gInt7dHJhbnNsYXRpb24uZW59fSIKeyUtIGVuZGZvciAlfQoA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABnaW5nZXIvaGFuZGxlcl9mb3JtLmd0
bXBsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAwMDAxNzUwADAwMDE3NTAAMDAwMDAwMTExMDMA
MTMyNTEwMTY2NDUAMDE1MzExACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAHVzdGFyICAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhZ3JlaWYAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHslIGluY2x1ZGUgJ21hY3Jvcy5ndG1w
bCcgLSV9Cgp2e3tfZm9ybVR5cGV9fXt7bW9kZWwubmFtZUNhcH19Rm9ybSA6OiBNYXliZSB7e21v
ZGVsLm5hbWVDYXB9fSAtPiBIdG1sIC0+IE1Gb3JtIEhhbmRsZXIgKEZvcm1SZXN1bHQgVnt7X2Zv
cm1UeXBlfX17e21vZGVsLm5hbWVDYXB9fSwgV2lkZ2V0KQp2e3tfZm9ybVR5cGV9fXt7bW9kZWwu
bmFtZUNhcH19Rm9ybSBtYXliZXt7bW9kZWwubmFtZUNhcH19IGV4dHJhID0gZG8KICB7JS0gZm9y
IGZpZWxkIGluIF9maWVsZHMgJX0KICB7JS0gc2V0IF92aWV3ID0gX2Zvcm1UeXBlID09ICdBZGQn
ID8gZmllbGQuYWRkVmlldyA6IGZpZWxkLmVkaXRWaWV3ICV9CiAgeyUtIGlmIF92aWV3ICV9CiAg
KHt7ZmllbGQubmFtZX19UmVzdWx0LCB7e2ZpZWxkLm5hbWV9fVZpZXcpIDwtIHt7X3ZpZXcuaXNS
ZXF1aXJlZCA/ICdtcmVxJyA6ICdtb3B0J319e3snICd9fQogICAgICB7JS0gaWYgZmllbGQuYmVs
b25nc1RvICV9CiAgICAgICAge3stICcoJyB+IGZpZWxkLmZvcm1GaWVsZFR5cGUgfiAnICcgfiBm
aWVsZC5uYW1lIH4gJ09wdGlvbnMpJyB9fQogICAgICB7JS0gZWxzZSAlfQogICAgICAgIHt7LSBm
aWVsZC5mb3JtRmllbGRUeXBlIH19CiAgICAgIHslLSBlbmRpZiAlfQogICAge3tmaWVsZC5uYW1l
fX1GcwogICAgeyUgaWYgX3ZpZXcuZGVmYXVsdCA9PSBudWxsIC0lfQogICAgICAoe3tfdmlldy5p
c09wdGlvbmFsICYmIGZpZWxkLmRiLmlzTm90TnVsbGFibGUgPyAnSnVzdCAkICcgOiAnJ319e3tt
b2RlbC5uYW1lfX17e2ZpZWxkLm5hbWVDYXB9fSA8JD4gbWF5YmV7e21vZGVsLm5hbWVDYXB9fSkK
ICAgIHslLSBlbHNlIC0lfQogICAgICAoe3sgX3ZpZXcuZGVmYXVsdCB9fSkKICAgIHslLSBlbmRp
ZiAtJX0KICB7JS0gZW5kaWYgLSV9CiAgeyUtIGVuZGZvciAlfQogIHslLSBpZiBfZm9ybVR5cGUg
PT0gJ0VkaXQnICV9CiAgKHZlcnNpb25SZXN1bHQsIHZlcnNpb25WaWV3KSA8LSBtcmVxIGhpZGRl
bkZpZWxkCiAgICB2ZXJzaW9uRnMKICAgICh7e21vZGVsLm5hbWV9fVZlcnNpb24gPCQ+IG1heWJl
e3ttb2RlbC5uYW1lQ2FwfX0pCiAgeyUtIGVuZGlmICV9CiAgbGV0IHZ7e19mb3JtVHlwZX19e3tt
b2RlbC5uYW1lQ2FwfX1SZXN1bHQgPSBWe3tfZm9ybVR5cGV9fXt7bW9kZWwubmFtZUNhcH19CiAg
ICB7JS0gZm9yIGZpZWxkIGluIF9maWVsZHMgJX0KICAgIHslLSBzZXQgX3ZpZXcgPSBfZm9ybVR5
cGUgPT0gJ0FkZCcgPyBmaWVsZC5hZGRWaWV3IDogZmllbGQuZWRpdFZpZXcgJX0KICAgIHslLSBp
ZiBfdmlldyAtJX0KICAgICAgICB7e2xvb3AuZmlyc3QgPyAnIDwkPiAnIDogJyA8Kj4gJ319e3tm
aWVsZC5uYW1lfX1SZXN1bHQKICAgIHslLSBlbmRpZiAtJX0KICAgIHslLSBlbmRmb3IgLSV9CiAg
ICB7JS0gaWYgX2Zvcm1UeXBlID09ICdFZGl0JyAtJX0KICAgIHt7JyAnfX08Kj4gdmVyc2lvblJl
c3VsdAogICAgeyUtIGVuZGlmICV9CiAgbGV0IGZvcm1XaWRnZXQgPSB0b1dpZGdldCBbd2hhbWxl
dHwKICAgICN7ZXh0cmF9CiAgICB7JS0gaWYgX2Zvcm1UeXBlID09ICdFZGl0JyAlfQogICAgXntm
dklucHV0IHZlcnNpb25WaWV3fQogICAgeyUtIGVuZGlmICV9CiAgICB7JS0gZm9yIGZpZWxkIGlu
IF9maWVsZHMgJX0KICAgIHslLSBzZXQgX3ZpZXcgPSBfZm9ybVR5cGUgPT0gJ0FkZCcgPyBmaWVs
ZC5hZGRWaWV3IDogZmllbGQuZWRpdFZpZXcgJX0KICAgIHslLSBpZiBfdmlldyAlfQogICAgPGRp
diAudWstbWFyZ2luLXNtYWxsIDpub3QgJCBudWxsICQgZnZFcnJvcnMge3tmaWVsZC5uYW1lfX1W
aWV3Oi51ay1mb3JtLWRhbmdlcj4KICAgICAgPGxhYmVsIC51ay1mb3JtLWxhYmVsIDpub3QgJCBu
dWxsICQgZnZFcnJvcnMge3tmaWVsZC5uYW1lfX1WaWV3Oi51ay10ZXh0LWRhbmdlciBmb3I9I3tm
dklkIHt7ZmllbGQubmFtZX19Vmlld30+I3tmdkxhYmVsIHt7ZmllbGQubmFtZX19Vmlld30KICAg
ICAgPGRpdiAudWstZm9ybS1jb250cm9scz4KICAgICAgICBee2Z2SW5wdXQge3tmaWVsZC5uYW1l
fX1WaWV3fQogICAgICAgICRtYXliZSBlcnIgPC0gZnZFcnJvcnMge3tmaWVsZC5uYW1lfX1WaWV3
CiAgICAgICAgICAmbmJzcDsje2Vycn0KICAgIHslLSBlbmRpZiAtJX0KICAgIHslLSBlbmRmb3Ig
JX0KICAgIHxdCiAgcmV0dXJuICh2e3tfZm9ybVR5cGV9fXt7bW9kZWwubmFtZUNhcH19UmVzdWx0
LCBmb3JtV2lkZ2V0KQogIHdoZXJlCiAgICB7JS0gZm9yIGZpZWxkIGluIG1vZGVsLmJlbG9uZ3NU
b0ZpZWxkcyAtJX0KICAgICAge3sgZmllbGQubmFtZSB+ICdPcHRpb25zID0gb3B0aW9uc1BlcnNp
c3RLZXkgW10gW0FzYyAnIH4gZmllbGQuYmVsb25nc1RvLm1vZGVsQ2FwIH4gZmllbGQuYmVsb25n
c1RvLnNvcnRGaWVsZENhcCB+ICddICcgfiBmaWVsZC5iZWxvbmdzVG8ubW9kZWwgfiBmaWVsZC5i
ZWxvbmdzVG8uZGlzcEZpZWxkQ2FwIH19CiAgICB7JSBlbmRmb3IgLSV9CiAgICB7JS0gZm9yIGZp
ZWxkIGluIF9maWVsZHMgJX0KICAgIHslLSBzZXQgX3ZpZXcgPSBfZm9ybVR5cGUgPT0gJ0FkZCcg
PyBmaWVsZC5hZGRWaWV3IDogZmllbGQuZWRpdFZpZXcgJX0KICAgIHslLSBpZiBfdmlldyAlfQog
ICAge3tmaWVsZC5uYW1lfX1GcyA6OiBGaWVsZFNldHRpbmdzIEFwcAogICAge3tmaWVsZC5uYW1l
fX1GcyA9IEZpZWxkU2V0dGluZ3MKICAgICAgeyBmc0xhYmVsID0gU29tZU1lc3NhZ2Uge3snTXNn
JyB+IF9mb3JtVHlwZSB+IG1vZGVsLm5hbWVDYXAgfiBmaWVsZC5uYW1lQ2FwfX0KICAgICAgLCBm
c1Rvb2x0aXAgPSBOb3RoaW5nCiAgICAgICwgZnNJZCA9IEp1c3QgInt7ZmllbGQubmFtZX19Igog
ICAgICAsIGZzTmFtZSA9IEp1c3QgInt7ZmllbGQubmFtZX19IgogICAgICAsIGZzQXR0cnMgPSBb
IHslIGZvciBhdHRyIGluIF92aWV3LmF0dHJzIC0lfQogICAgICAgICAgICAgICAgICB7e2NvbmNh
dCgiKFwiIiwgYXR0ci5rZXksICJcIiwiLCAiXCIiLCBhdHRyLnZhbHVlLCAiXCIpIil8cHJlZml4
Q29tbWFVbmxlc3NMb29wRmlyc3R9fQogICAgICAgICAgICAgICAgICB7JS0gZW5kZm9yICV9IF0K
ICAgICAgfQogICAgeyUtIGVuZGlmIC0lfQogICAgeyUtIGVuZGZvciAlfQogICAgeyUtIGlmIF9m
b3JtVHlwZSA9PSAnRWRpdCcgJX0KICAgIHZlcnNpb25GcyA6OiBGaWVsZFNldHRpbmdzIEFwcAog
ICAgdmVyc2lvbkZzID0gRmllbGRTZXR0aW5ncwogICAgICB7IGZzTGFiZWwgPSAiIgogICAgICAs
IGZzVG9vbHRpcCA9IE5vdGhpbmcKICAgICAgLCBmc0lkID0gSnVzdCAidmVyc2lvbiIKICAgICAg
LCBmc05hbWUgPSBKdXN0ICJ2ZXJzaW9uIgogICAgICAsIGZzQXR0cnMgPSBbXQogICAgICB9CiAg
ICB7JS0gZW5kaWYgJX0KCmRhdGEgTXNne3tfZm9ybVR5cGV9fXt7bW9kZWwubmFtZUNhcH19ID0K
eyUtIGZvciBmaWVsZCBpbiBfZmllbGRzICV9CnslLSBzZXQgX3ZpZXcgPSBfZm9ybVR5cGUgPT0g
J0FkZCcgPyBmaWVsZC5hZGRWaWV3IDogZmllbGQuZWRpdFZpZXcgJX0KeyUtIGlmIF92aWV3ICV9
CiAge3soJ01zZycgfiBfZm9ybVR5cGUgfiBtb2RlbC5uYW1lQ2FwIH4gZmllbGQubmFtZUNhcCl8
cHJlZml4R3VhcmRVbmxlc3NMb29wTGFzdCAtfX0KeyUgZW5kaWYgJX0KeyUtIGVuZGZvciAlfQoK
aW5zdGFuY2UgUmVuZGVyTWVzc2FnZSBBcHAgTXNne3tfZm9ybVR5cGV9fXt7bW9kZWwubmFtZUNh
cH19IHdoZXJlCiAgcmVuZGVyTWVzc2FnZSBfIFtdICAgICAgICA9IHJlbmRlcnt7X2Zvcm1UeXBl
fX17e21vZGVsLm5hbWVDYXB9fUdlcm1hbgogIHJlbmRlck1lc3NhZ2UgXyAoImRlIjpfKSA9IHJl
bmRlcnt7X2Zvcm1UeXBlfX17e21vZGVsLm5hbWVDYXB9fUdlcm1hbgogIHJlbmRlck1lc3NhZ2Ug
XyAoImVuLVVTIjpfKSA9IHJlbmRlcnt7X2Zvcm1UeXBlfX17e21vZGVsLm5hbWVDYXB9fUVuZ2xp
c2gKICByZW5kZXJNZXNzYWdlIG0gKF8gICA6bHMpID0gcmVuZGVyTWVzc2FnZSBtIGxzCgpyZW5k
ZXJ7e19mb3JtVHlwZX19e3ttb2RlbC5uYW1lQ2FwfX1HZXJtYW4gOjoge3snTXNnJyB+IF9mb3Jt
VHlwZSB+IG1vZGVsLm5hbWVDYXB9fSAtPiBUZXh0CnslIGZvciBmaWVsZCBpbiBfZmllbGRzIC0l
fQp7JS0gc2V0IF92aWV3ID0gX2Zvcm1UeXBlID09ICdBZGQnID8gZmllbGQuYWRkVmlldyA6IGZp
ZWxkLmVkaXRWaWV3ICV9CnslLSBpZiBfdmlldyAtJX0KcmVuZGVye3tfZm9ybVR5cGV9fXt7bW9k
ZWwubmFtZUNhcH19R2VybWFuIHt7J01zZycgfiBfZm9ybVR5cGUgfiBtb2RlbC5uYW1lQ2FwIH4g
ZmllbGQubmFtZUNhcCB9fSA9ICJ7e2ZpZWxkLmxhYmVsRGV9fSIKeyUgZW5kaWYgJX0KeyUtIGVu
ZGZvciAlfQoKcmVuZGVye3tfZm9ybVR5cGV9fXt7bW9kZWwubmFtZUNhcH19RW5nbGlzaCA6OiB7
eydNc2cnIH4gX2Zvcm1UeXBlIH4gbW9kZWwubmFtZUNhcCB9fSAtPiBUZXh0CnslIGZvciBmaWVs
ZCBpbiBfZmllbGRzICV9CnslLSBzZXQgX3ZpZXcgPSBfZm9ybVR5cGUgPT0gJ0FkZCcgPyBmaWVs
ZC5hZGRWaWV3IDogZmllbGQuZWRpdFZpZXcgJX0KeyUtIGlmIF92aWV3IC0lfQpyZW5kZXJ7e19m
b3JtVHlwZX19e3ttb2RlbC5uYW1lQ2FwfX1FbmdsaXNoIHt7J01zZycgfiBfZm9ybVR5cGUgfiBt
b2RlbC5uYW1lQ2FwIH4gZmllbGQubmFtZUNhcCB9fSA9ICJ7e2ZpZWxkLmxhYmVsRW59fSIKeyUg
ZW5kaWYgJX0KeyUtIGVuZGZvciAlfQoKe3stICcnIC19fQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2luZ2VyL3Jpb3RfaTE4bl9kaWN0Lmd0bXBsAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAADAwMDA2NDQAMDAwMTc1MAAwMDAxNzUwADAwMDAwMDAxMzU2ADEzMjUxMDE2NjQ1
ADAxNTUwMQAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3Rh
ciAgAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgICAgXCBpMThuLmRpY3Rpb25hcnkoewogICAgXCAgImRl
Ijogewp7JS0gZm9yIHRyYW5zbGF0aW9uIGluIHRyYW5zbGF0aW9ucyAlfQogICAgXCAgICAie3sn
TXNnR2xvYmFsJyB+IHRyYW5zbGF0aW9uLmtleUNhcCB9fSI6ICJ7e3RyYW5zbGF0aW9uLmRlfX0i
LAp7JS0gZW5kZm9yICV9CnslLSBmb3IgbW9kZWwgaW4gbW9kZWxzICV9CnslLSBmb3IgZmllbGQg
aW4gbW9kZWwuZmllbGRzICV9CnslLSBpZiBmaWVsZC5sYWJlbERlICV9CiAgICBcICAgICJ7eydN
c2cnIH4gbW9kZWwubmFtZUNhcCB+IGZpZWxkLm5hbWVDYXAgfX0iOiAie3tmaWVsZC5sYWJlbERl
fX0iLAp7JS0gZW5kaWYgJX0KeyUtIGVuZGZvciAlfQp7JS0gZW5kZm9yICV9CiAgICBcICB9LAog
ICAgXCAgImVuLVVTIjogewp7JS0gZm9yIHRyYW5zbGF0aW9uIGluIHRyYW5zbGF0aW9ucyAlfQog
ICAgXCAgICAie3snTXNnR2xvYmFsJyB+IHRyYW5zbGF0aW9uLmtleUNhcCB9fSI6ICJ7e3RyYW5z
bGF0aW9uLmVufX0iLAp7JS0gZW5kZm9yICV9CnslLSBmb3IgbW9kZWwgaW4gbW9kZWxzICV9Cnsl
LSBmb3IgZmllbGQgaW4gbW9kZWwuZmllbGRzICV9CnslLSBpZiBmaWVsZC5sYWJlbEVuICV9CiAg
ICBcICAgICJ7eydNc2cnIH4gbW9kZWwubmFtZUNhcCB+IGZpZWxkLm5hbWVDYXAgfX0iOiAie3tm
aWVsZC5sYWJlbEVufX0iLAp7JS0gZW5kaWYgJX0KeyUtIGVuZGZvciAlfQp7JS0gZW5kZm9yICV9
CiAgICBcICAgfQogICAgXCB9KQoKe3stICcnIC19fQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2luZ2VyL21vZGVscy5ndG1wbAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAADAwMDA2NDQAMDAwMTc1MAAwMDAxNzUwADAwMDAwMDAyMjc1ADEzMjUxMDE2NjQ1ADAx
NDE0NgAgMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAg
AGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB7JSBmb3IgbW9kZWwgaW4gbW9kZWxzICV9CnslIGlmIG1vZGVs
LmlzSW5EYiAlfQp7e21vZGVsLm5hbWVDYXB9fXt7bW9kZWwuaXNKc29uID8gJyBqc29uJyA6ICcn
fX0KeyUtIGZvciBmaWVsZCBpbiBtb2RlbC5maWVsZHMgJX0KICAgIHslLSBpZiBmaWVsZC5kYiAl
fQogICAge3tmaWVsZC5uYW1lfX0ge3tmaWVsZC5oc1R5cGV9fXt7ZmllbGQuZGIuaXNOdWxsYWJs
ZSA/ICcgTWF5YmUnIDogJycgfX17e2ZpZWxkLmRiLmRlZmF1bHQgPyAnIGRlZmF1bHQ9JyB+IGZp
ZWxkLmRiLmRlZmF1bHQgOiAnJy19fQogICAgeyUgZW5kaWYgJX0KeyUtIGVuZGZvciAlfQogICAg
dmVyc2lvbiBJbnQKICAgIGNyZWF0ZWRBdCBVVENUaW1lCiAgICBjcmVhdGVkQnkgVGV4dAogICAg
dXBkYXRlZEF0IFVUQ1RpbWUKICAgIHVwZGF0ZWRCeSBUZXh0CnslLSBmb3IgZGJVbmlxdWVuZXNz
IGluIG1vZGVsLmRiVW5pcXVlbmVzc2VzICV9CiAgICB7e2RiVW5pcXVlbmVzc319CnslLSBlbmRm
b3IgJX0KeyUtIGlmIG1vZGVsLmhzRGVyaXZpbmdzICV9CiAgICBkZXJpdmluZyB7JS0gZm9yIGhz
RGVyaXZpbmcgaW4gbW9kZWwuaHNEZXJpdmluZ3MgJX0ge3toc0Rlcml2aW5nfX17JS0gZW5kZm9y
ICV9CnslLSBlbmRpZiAlfQoKeyUgaWYgbW9kZWwuZGJIYXNIaXN0b3J5VGFibGUgJX0Ke3ttb2Rl
bC5uYW1lQ2FwfX1IaXN0b3J5CiAgICBJZCBzcWw9dmlkCiAgICBpZCBJbnQgTWlncmF0aW9uT25s
eQp7JS0gZm9yIGZpZWxkIGluIG1vZGVsLmZpZWxkcyAlfQogICAgeyUtIGlmIGZpZWxkLmRiICV9
CiAgICB7JS0gaWYgZmllbGQuaXNGb3JlaWduS2V5ICV9CiAgICB7e2ZpZWxkLm5hbWV9fSBJbnR7
e2ZpZWxkLmRiLmlzTnVsbGFibGUgPyAnIE1heWJlJyA6ICcnIH19CiAgICB7JS0gZWxzZSAlfQog
ICAge3tmaWVsZC5uYW1lfX0ge3tmaWVsZC5oc1R5cGV9fXt7ZmllbGQuZGIuaXNOdWxsYWJsZSA/
ICcgTWF5YmUnIDogJycgfX17e2ZpZWxkLmRiLmRlZmF1bHQgPyAnIGRlZmF1bHQ9JyB+IGZpZWxk
LmRiLmRlZmF1bHQgOiAnJy19fQogICAgeyUtIGVuZGlmICV9CiAgICB7JS0gZW5kaWYgJX0KeyUt
IGVuZGZvciAlfQogICAgdmVyc2lvbiBJbnQKICAgIGNyZWF0ZWRBdCBVVENUaW1lCiAgICBjcmVh
dGVkQnkgVGV4dAogICAgdXBkYXRlZEF0IFVUQ1RpbWUKICAgIHVwZGF0ZWRCeSBUZXh0CnslLSBl
bmRpZiAtJX0KeyUtIGVuZGlmIC0lfQp7JSBlbmRmb3IgJX0KAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABnaW5nZXIvaGFuZGxlcl9nZXRfZWRpdF9mb3JtLmd0bXBsAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAMDAwMDY0NAAwMDAxNzUwADAwMDE3NTAAMDAwMDAwMDEzMTIAMTMzMTU3MTQ2NTYAMDE3MTY2
ACAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAYWdy
ZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAHslIGluY2x1ZGUgJ21hY3Jvcy5ndG1wbCcgLSV9CgpnZXRFZGl0e3tt
b2RlbC5uYW1lQ2FwfX1Gb3JtUiA6OiB7e21vZGVsLm5hbWVDYXB9fUlkIC0+IEhhbmRsZXIgSHRt
bApnZXRFZGl0e3ttb2RlbC5uYW1lQ2FwfX1Gb3JtUiB7e21vZGVsLm5hbWV9fUlkID0gZG8KICB7
JSBpZiBtb2RlbC5lZGl0Rm9ybUVudGl0eUxvYWRlciAtJX0KICB7eyBtb2RlbC5lZGl0Rm9ybUVu
dGl0eUxvYWRlciB9fQogIHslLSBlbHNlIC0lfQogIHt7bW9kZWwubmFtZX19IDwtIHJ1bkRCICQg
Z2V0NDA0IHt7bW9kZWwubmFtZX19SWQKICB7JS0gZW5kaWYgJX0KICAoZm9ybVdpZGdldCwgXykg
PC0gZ2VuZXJhdGVGb3JtUG9zdCAkIHZFZGl0e3ttb2RlbC5uYW1lQ2FwfX1Gb3JtICQgSnVzdCB7
e21vZGVsLm5hbWV9fQogIGZvcm1MYXlvdXQgJCBkbwogICAgdG9XaWRnZXQgW3doYW1sZXR8CiAg
ICAgIDxoMT5FZGl0IHt7bW9kZWwubGFiZWx9fQogICAgICA8Zm9ybSAjbW9kYWwtZm9ybSAudWst
Zm9ybS1ob3Jpem9udGFsIG1ldGhvZD1wb3N0IG9uc3VibWl0PSJyZXR1cm4gZmFsc2U7IiBhY3Rp
b249e3tzaGFrZXNVcmwoJ015cHJvamVjdFIgJCBFZGl0JyB+IG1vZGVsLm5hbWVDYXAgfiAnUiAn
IH4gbW9kZWwubmFtZSB+ICdJZCcpfX0+CiAgICAgICAgPGRpdiAjbW9kYWwtZm9ybS13aWRnZXQ+
CiAgICAgICAgICBee2Zvcm1XaWRnZXR9CiAgICAgIHxdCgp7ey0gJycgLX19CgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAABnaW5nZXIvaGFuZGxlcl9wb3N0X2VkaXRfZm9ybS5ndG1wbAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
MDAwMDY0NAAwMDAxNzUwADAwMDE3NTAAMDAwMDAwMDMzNDYAMTMyNTEwMTY2NDUAMDE3Mzc1ACAw
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAYWdyZWlm
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAHslIGluY2x1ZGUgJ21hY3Jvcy5ndG1wbCcgLSV9Cgpwb3N0RWRpdHt7bW9k
ZWwubmFtZUNhcH19UiA6OiB7e21vZGVsLm5hbWVDYXB9fUlkIC0+IEhhbmRsZXIgVmFsdWUKcG9z
dEVkaXR7e21vZGVsLm5hbWVDYXB9fVIge3ttb2RlbC5uYW1lfX1JZCA9IGRvCiAgKChyZXN1bHQs
IGZvcm1XaWRnZXQpLCBfKSA8LSBydW5Gb3JtUG9zdCAkIHZFZGl0e3ttb2RlbC5uYW1lQ2FwfX1G
b3JtIE5vdGhpbmcKICBjYXNlIHJlc3VsdCBvZgogICAgRm9ybVN1Y2Nlc3MgdkVkaXR7e21vZGVs
Lm5hbWVDYXB9fSAtPiBkbwogICAgICBjdXJUaW1lIDwtIGxpZnRJTyBnZXRDdXJyZW50VGltZQog
ICAgICBFbnRpdHkgXyBhdXRoVXNlciA8LSByZXF1aXJlQXV0aAogICAgICB1cmxSZW5kZXJlciA8
LSBnZXRVcmxSZW5kZXIKICAgICAgeyUgaWYgbW9kZWwuZWRpdFBvc3RMb2Fkc01vZGVsIC0lfQog
ICAgICB7eyBtb2RlbC5uYW1lIH19IDwtIHJ1bkRCICQgZ2V0NDA0IHt7bW9kZWwubmFtZX19SWQK
ICAgICAgeyUgZW5kaWYgLSV9CiAgICAgIGxldCBwZXJzaXN0RmllbGRzID0gWwogICAgICAgIHsl
LSBmb3IgZmllbGQgaW4gbW9kZWwuZGJVcGRhdGFibGVGaWVsZHMgJX0KICAgICAgICAgICAge3tw
cmVmaXhDb21tYVVubGVzc0xvb3BGaXJzdCgpfX17e21vZGVsLm5hbWVDYXB9fXt7ZmllbGQubmFt
ZUNhcH19ID0uIHZFZGl0e3ttb2RlbC5uYW1lQ2FwfX17e2ZpZWxkLm5hbWVDYXB9fSB2RWRpdHt7
bW9kZWwubmFtZUNhcH19CiAgICAgICAgeyUtIGVuZGZvciAlfQogICAgICAgICAgICB7eyBtb2Rl
bC5kYlVwZGF0YWJsZUZpZWxkcyA/ICcsICcgOiAnJ319CiAgICAgICAgICAgIHt7LSBtb2RlbC5u
YW1lQ2FwfX1WZXJzaW9uID0uIHZFZGl0e3ttb2RlbC5uYW1lQ2FwfX1WZXJzaW9uIHZFZGl0e3tt
b2RlbC5uYW1lQ2FwfX0gKyAxCiAgICAgICAgICAgICwge3ttb2RlbC5uYW1lQ2FwfX1VcGRhdGVk
QXQgPS4gY3VyVGltZQogICAgICAgICAgICAsIHt7bW9kZWwubmFtZUNhcH19VXBkYXRlZEJ5ID0u
IHVzZXJJZGVudCBhdXRoVXNlcgogICAgICAgICAgICBdCiAgICAgIHVwZGF0ZUNvdW50IDwtIHJ1
bkRCICQgdXBkYXRlV2hlcmVDb3VudCBbIHt7bW9kZWwubmFtZUNhcH19SWQgPT0uIHt7bW9kZWwu
bmFtZX19SWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwg
e3ttb2RlbC5uYW1lQ2FwfX1WZXJzaW9uID09LiB2RWRpdHt7bW9kZWwubmFtZUNhcH19VmVyc2lv
biB2RWRpdHt7bW9kZWwubmFtZUNhcH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICBdIHBlcnNpc3RGaWVsZHMKICAgICAgaWYgdXBkYXRlQ291bnQgPT0gMQog
ICAgICAgIHRoZW4gcmV0dXJuSnNvbiAkIFZGb3JtU3VibWl0U3VjY2VzcyB7IGZzU3VjY2Vzc0Rh
dGFKc29uVXJsID0gdXJsUmVuZGVyZXIgJCB7e21vZGVsLmVkaXRGb3JtRGF0YUpzb25Vcmx9fSB9
CiAgICAgICAgZWxzZSByZXR1cm5Kc29uICQgVkZvcm1TdWJtaXRTdGFsZSB7IGZzU3RhbGVEYXRh
SnNvblVybCA9IHVybFJlbmRlcmVyICQge3ttb2RlbC5lZGl0Rm9ybURhdGFKc29uVXJsfX0gfQog
ICAgXyAtPiBkbwogICAgICByZXN1bHRIdG1sIDwtIGZvcm1MYXlvdXQgW3doYW1sZXR8Xntmb3Jt
V2lkZ2V0fXxdCiAgICAgIHJldHVybkpzb24gJCBWRm9ybVN1Ym1pdEludmFsaWQKICAgICAgICB7
IGZzSW52YWxpZE1vZGFsV2lkZ2V0SHRtbCA9IHRvU3RyaWN0ICQgQmxhemUucmVuZGVySHRtbCBy
ZXN1bHRIdG1sIH0KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAZ2luZ2VyL2hhbmRsZXJfcG9zdF9kZWxldGVfZm9ybS5ndG1wbAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2
NDQAMDAwMTc1MAAwMDAxNzUwADAwMDAwMDAwNjMzADEzMjUxMDE2NjQ1ADAxNzcwNgAgMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABwb3N0RGVsZXRle3ttb2RlbC5uYW1lQ2FwfX1SIDo6IHt7bW9kZWwubmFtZUNhcH19
SWQgLT4gSGFuZGxlciBWYWx1ZQpwb3N0RGVsZXRle3ttb2RlbC5uYW1lQ2FwfX1SIHt7bW9kZWwu
bmFtZX19SWQgPSBkbwogIHslIGlmIG1vZGVsLmRlbGV0ZVBvc3RMb2Fkc01vZGVsIC0lfQogIHt7
IG1vZGVsLm5hbWUgfX0gPC0gcnVuREIgJCBnZXQ0MDQge3ttb2RlbC5uYW1lfX1JZAogIHslIGVu
ZGlmIC0lfQogIHJ1bkRCICQgZGVsZXRlIHt7bW9kZWwubmFtZX19SWQKICB1cmxSZW5kZXJlciA8
LSBnZXRVcmxSZW5kZXIKICByZXR1cm5Kc29uICQgVkZvcm1TdWJtaXRTdWNjZXNzIHsgZnNTdWNj
ZXNzRGF0YUpzb25VcmwgPSB1cmxSZW5kZXJlciAkIHt7bW9kZWwuZGVsZXRlRm9ybURhdGFKc29u
VXJsfX0gfQoKe3stICcnIC19fQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAGdpbmdlci9tYWNyb3MuZ3RtcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwMDAwNjQ0
ADAwMDE3NTAAMDAwMTc1MAAwMDAwMDAwMDcwMwAxMzI1MTAxNjY0NQAwMTQxNDEAIDAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXN0YXIgIABhZ3JlaWYAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAeyUtIG1hY3JvIHNoYWtlc1VybChzdHIpIC0lfQogIHt7ICdAeycgfiBzdHJ8Y2FwaXRh
bGl6ZSB+ICd9JyB9fQp7JS0gZW5kbWFjcm8gLSV9Cgp7JS0gbWFjcm8gYXBwZW5kQ29tbWFVbmxl
c3NMb29wTGFzdChzdHIpIC0lfQogIHt7IHN0ciB+IChsb29wLmxhc3QgPyAiIiA6ICIsIikgfX0K
eyUtIGVuZG1hY3JvIC0lfQoKeyUtIG1hY3JvIHByZWZpeENvbW1hVW5sZXNzTG9vcEZpcnN0KHN0
cikgLSV9CiAge3sgKGxvb3AuZmlyc3QgPyAiIiA6ICIsICIpIH4gc3RyIH19CnslLSBlbmRtYWNy
byAtJX0KCnslLSBtYWNybyBwcmVmaXhHdWFyZFVubGVzc0xvb3BMYXN0KHN0cikgLSV9CiAge3sg
KGxvb3AuZmlyc3QgPyAiIiA6ICJ8ICIpIH4gc3RyIH19CnslLSBlbmRtYWNybyAtJX0KCnslLSBt
YWNybyBjYXAoc3RyKSAtJX0KICB7eyBzdHJ8Y2FwaXRhbGl6ZSB9fQp7JS0gZW5kbWFjcm8gLSV9
CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAABnaW5nZXIvaGFuZGxlcl9lZGl0X2Zvcm0uZ3RtcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAw
MDAxNzUwADAwMDE3NTAAMDAwMDAwMDAxNTUAMTMyNTEwMTY2NDUAMDE2MzIzACAwAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAYWdyZWlmAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAHslLSBzZXQgX2Zvcm1UeXBlID0gJ0VkaXQnICV9CnslLSBzZXQgX2ZpZWxkcyA9IG1vZGVs
LmVkaXRWaWV3RmllbGRzICV9CnslLSBpbmNsdWRlICdoYW5kbGVyX2Zvcm0uZ3RtcGwnIC0lfQoA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAZ2luZ2VyL3Bvc3RncmVzcWxfdHJpZ2dlcnMuZ3RtcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQAMDAw
MTc1MAAwMDAxNzUwADAwMDAwMDAyNTA3ADEzMjUxMDE2NjQ1ADAxNjc3MgAgMAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAB7JSBpbmNsdWRlICdtYWNyb3MuZ3RtcGwnIC0lfQoKeyUgZm9yIG1vZGVsIGluIG1vZGVscyAl
fQp7JSBpZiBtb2RlbC5pc0luRGIgJX0KeyUgaWYgbW9kZWwuZGJIYXNIaXN0b3J5VGFibGUgJX0K
CmRyb3AgZnVuY3Rpb24gcHVibGljLnByb2Nlc3NfYXVkaXRfe3ttb2RlbC5kYlRhYmxlTmFtZX19
KCkgY2FzY2FkZTsKY3JlYXRlIG9yIHJlcGxhY2UgZnVuY3Rpb24gcHVibGljLnByb2Nlc3NfYXVk
aXRfe3ttb2RlbC5kYlRhYmxlTmFtZX19KCkKIHJldHVybnMgdHJpZ2dlcgogbGFuZ3VhZ2UgcGxw
Z3NxbAphcyAkZnVuY3Rpb24kCiAgIGJlZ2luCiAgICAgICBpZiB0b19yZWdjbGFzcygne3ttb2Rl
bC5kYkhpc3RvcnlUYWJsZU5hbWV9fScpIGlzIG5vdCBudWxsIHRoZW4KICAgICAgICAgICBpZiAo
VEdfT1AgPSAnVVBEQVRFJyBvciBUR19PUCA9ICdJTlNFUlQnKSB0aGVuCiAgICAgICAgICAgICAg
ICBpbnNlcnQgaW50byB7e21vZGVsLmRiSGlzdG9yeVRhYmxlTmFtZX19CiAgICAgICAgICAgICAg
ICAgICAgICAgKGlkLCB7JSBmb3IgZmllbGQgaW4gbW9kZWwuZmllbGRzICV9eyUgaWYgZmllbGQu
ZGIgJX17e2ZpZWxkLmRiQ29sdW1uTmFtZXxwcmVmaXhDb21tYVVubGVzc0xvb3BGaXJzdH19eyUg
ZW5kaWYgJX17JSBlbmRmb3IgJX0sIHZlcnNpb24sIGNyZWF0ZWRfYXQsIGNyZWF0ZWRfYnksIHVw
ZGF0ZWRfYXQsIHVwZGF0ZWRfYnkpCiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzCiAgICAg
ICAgICAgICAgICAgICAgICAgKG5ldy5pZCwgeyUgZm9yIGZpZWxkIGluIG1vZGVsLmZpZWxkcyAl
fXslIGlmIGZpZWxkLmRiICV9e3soJ25ldy4nIH4gZmllbGQuZGJDb2x1bW5OYW1lKXxwcmVmaXhD
b21tYVVubGVzc0xvb3BGaXJzdH19eyUgZW5kaWYgJX17JSBlbmRmb3IgJX0sIG5ldy52ZXJzaW9u
LCBuZXcuY3JlYXRlZF9hdCwgbmV3LmNyZWF0ZWRfYnksIG5ldy51cGRhdGVkX2F0LCBuZXcudXBk
YXRlZF9ieSk7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3OwogICAgICAgICAgICBlbmQgaWY7
CiAgICAgICBlbmQgaWY7CiAgICAgICByZXR1cm4gbnVsbDsgLS0gcmVzdWx0IGlzIGlnbm9yZWQg
c2luY2UgdGhpcyBpcyBhbiBhZnRlciB0cmlnZ2VyCiAgICBlbmQ7CiRmdW5jdGlvbiQ7CgpjcmVh
dGUgdHJpZ2dlciBhdWRpdF97e21vZGVsLmRiVGFibGVOYW1lfX0gYWZ0ZXIgaW5zZXJ0IG9yIHVw
ZGF0ZSBvbiBwdWJsaWMue3ttb2RlbC5kYlRhYmxlTmFtZX19IGZvciBlYWNoIHJvdyBleGVjdXRl
IHByb2NlZHVyZSBwdWJsaWMucHJvY2Vzc19hdWRpdF97e21vZGVsLmRiVGFibGVOYW1lfX0oKTsK
CnslLSBlbmRpZiAtJX0KeyUtIGVuZGlmIC0lfQp7JSBlbmRmb3IgJX0KAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABn
aW5nZXIvaGFuZGxlcl9kYXRhX2VkaXQuZ3RtcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwMDY0NAAwMDAxNzUw
ADAwMDE3NTAAMDAwMDAwMDA3NTAAMTMyNTEwMTY2NDUAMDE2MjcyACAwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHVzdGFyICAAYWdyZWlmAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABhZ3JlaWYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHsl
IGluY2x1ZGUgJ21hY3Jvcy5ndG1wbCcgLSV9CgpkYXRhIFZFZGl0e3ttb2RlbC5uYW1lQ2FwfX0g
PSBWRWRpdHt7bW9kZWwubmFtZUNhcH19CiAgeyB7eycnfX0KICB7JS0gZm9yIGZpZWxkIGluIG1v
ZGVsLmVkaXRWaWV3RmllbGRzIC0lfQogICAge3tjb25jYXQoInZFZGl0IiwgbW9kZWwubmFtZUNh
cCwgZmllbGQubmFtZUNhcCwgIiA6OiAiLCBmaWVsZC5lZGl0Vmlldy5pc1JlcXVpcmVkID8gJycg
OiAnTWF5YmUgJywgZmllbGQuaHNUeXBlKXxwcmVmaXhDb21tYVVubGVzc0xvb3BGaXJzdH19CiAg
eyUgZW5kZm9yIC0lfQogICwgdkVkaXR7e21vZGVsLm5hbWVDYXB9fVZlcnNpb24gOjogSW50CiAg
fQogIHslLSBpZiBtb2RlbC5oc0Rlcml2aW5ncyAlfQogICAgZGVyaXZpbmcgeyUtIGZvciBoc0Rl
cml2aW5nIGluIG1vZGVsLmhzRGVyaXZpbmdzICV9IHt7aHNEZXJpdmluZ319eyUtIGVuZGZvciAl
fQogIHslLSBlbmRpZiAtJX0KCnt7LSAnJyAtfX0KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZ2lu
Z2VyL2hhbmRsZXJfYWRkX2Zvcm0uZ3RtcGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA2NDQAMDAwMTc1MAAw
MDAxNzUwADAwMDAwMDAwMTUzADEzMjUxMDE2NjQ1ADAxNjEyNAAgMAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhciAgAGFncmVpZgAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAYWdyZWlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7JS0g
c2V0IF9mb3JtVHlwZSA9ICdBZGQnICV9CnslLSBzZXQgX2ZpZWxkcyA9IG1vZGVsLmFkZFZpZXdG
aWVsZHMgJX0KeyUtIGluY2x1ZGUgJ2hhbmRsZXJfZm9ybS5ndG1wbCcgLSV9CgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==

{-# START_FILE hs-generator/package.yaml #-}
name:                hs-generator
version: "0.0.0"

dependencies:

# Due to a bug in GHC 8.0.1, we block its usage
# See: https://ghc.haskell.org/trac/ghc/ticket/12130
- base >=4.8.2.0 && <4.9 || >=4.9.1.0 && <5

- text
- ginger
- aeson
- strict
- optparse-applicative
- casing

# The library contains all of our application code. The executable
# defined below is just a thin wrapper.
library:
  source-dirs: src
  when:
  - condition: (flag(dev)) || (flag(library-only))
    then:
      ghc-options:
      - -Wall
      - -fwarn-tabs
      - -O0
      cpp-options: -DDEVELOPMENT
    else:
      ghc-options:
      - -Wall
      - -fwarn-tabs
      - -O2

# Runnable executable for our application
executables:
  hs-generator:
    main: Main.hs
    source-dirs: src
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - hs-generator
    when:
    - condition: flag(library-only)
      buildable: false

flags:
  library-only:
    description: Build for use with "yesod devel"
    manual: false
    default: false
  dev:
    description: Turn on development settings, like auto-reload templates.
    manual: false
    default: false

{-# START_FILE hs-generator/src/Main.hs #-}
{-# LANGUAGE OverloadedStrings #-}
module Main where

import Data.Text (Text)
import qualified Data.Text as Text
import qualified Text.Casing as TC
import Data.Aeson
import qualified Data.Maybe as M
import qualified Data.List as L
import qualified Text.Ginger as G
import qualified System.IO as SIO (IOMode(ReadMode), hSetEncoding, withFile, utf8_bom)
import qualified System.IO.Strict as SIOS
import qualified System.IO.Error as SIOE
import qualified Options.Applicative as O
import Data.Semigroup ((<>))

main :: IO ()
main = do
  templFile <- O.execParser argInfo
  template <- loadTemplate templFile
  putStrLn . Text.unpack $ G.easyRender context template

-- command line parser

argParser :: O.Parser String
argParser = O.argument O.str (O.metavar "TEMPLATE" <> O.help "Ginger template file")

argInfo :: O.ParserInfo String
argInfo = O.info (argParser O.<**> O.helper)
  ( O.fullDesc
  <> O.progDesc "Generate code from TEMPLATE"
  <> O.header "hs-generator - yesod partioal code generator" )

-- ginger

loadTemplate :: String -> IO (G.Template G.SourcePos)
loadTemplate templFile = do
  eitherTemplate <- G.parseGingerFile' opts templFile
  return $ case eitherTemplate of
             Left err -> error . show $ err
             Right template' -> template'

opts :: G.ParserOptions IO
opts = (G.mkParserOptions fileResolver) { G.poSourceName = Nothing
                                        , G.poKeepTrailingNewline = True }

fileResolver :: G.IncludeResolver IO
fileResolver filename = do
  content <- loadFile filename
  return $ Just content

loadFile :: FilePath -> IO String
loadFile fn =
  SIOE.tryIOError (loadFile' $ "ginger/" ++ fn) >>= \e ->
    case e of
      Right contents -> return contents
      Left err -> return $ show err
  where
    loadFile' :: FilePath -> IO String
    loadFile' fn' = do
      SIO.withFile fn' SIO.ReadMode $ \h -> do
        SIO.hSetEncoding h SIO.utf8_bom
        contents <- SIOS.hGetContents h
        return contents

-- helpers

upperFirst :: Text -> Text
upperFirst t = Text.append (Text.toUpper $ Text.take 1 t) (Text.drop 1 t)

lowerFirst :: Text -> Text
lowerFirst t = Text.append (Text.toLower $ Text.take 1 t) (Text.drop 1 t)

-- types

data BContext = BContext
  { bContextModels :: [BModel]
  , bContextTranslations :: [BTranslation]
  }

instance ToJSON BContext where
  toJSON o = object $
    [ "models" .= bContextModels o
    , "translations" .= bContextTranslations o
    ] ++ (map (\bModel@(BModel {bModelName = modelName}) -> (modelName <> "Model") .= bModel) $ bContextModels o)

data BModel = BModel
  { bModelName :: Text
  , bModelLabel :: Text
  , bModelIsJson :: Bool
  , bModelDbUniquenesses :: [Text]
  , bModelDbHasHistoryTable :: Bool
  , bModelHsDerivings :: [Text]
  , bModelFields :: [BField]
  , bModelAddFormEntityLoader :: Maybe Text
  , bModelEditFormEntityLoader :: Maybe Text
  , bModelDeleteFormEntityLoader :: Maybe Text
  , bModelAddFormDataJsonUrl :: Maybe Text
  , bModelEditFormDataJsonUrl :: Maybe Text
  , bModelDeleteFormDataJsonUrl :: Maybe Text
  , bModelAddFormHasDefaultModel :: Bool
  , bModelEditPostLoadsModel :: Bool
  , bModelDeletePostLoadsModel :: Bool
  , bModelParentHsType :: Maybe Text
  }

instance ToJSON BModel where
  toJSON o = object
    [ "name" .= bModelName o
    , "nameCap" .= (upperFirst $ bModelName o)
    , "label" .= bModelLabel o
    , "isJson" .= bModelIsJson o
    , "dbUniquenesses" .= bModelDbUniquenesses o
    , "dbHasHistoryTable" .= bModelDbHasHistoryTable o
    , "dbTableName" .= (TC.toQuietSnake $ TC.fromAny (Text.unpack $ bModelName o))
    , "dbHistoryTableName" .= ((TC.toQuietSnake $ TC.fromAny (Text.unpack $ bModelName o)) ++ "_history")
    , "dbUpdatableFields" .= (filter (\field -> case bFieldDb field of
                                                Just BFieldDb {bFieldDbCanUpdate = canUpdate} -> canUpdate
                                                Nothing -> False
                                   ) $ bModelFields o)
    , "hsDerivings" .= bModelHsDerivings o
    , "fields" .= bModelFields o
    , "addViewFields" .= (filter (\field -> M.isJust $ bFieldAddView field) $ bModelFields o)
    , "editViewFields" .= (filter (\field -> M.isJust $ bFieldEditView field) $ bModelFields o)
    , "isInDb" .= (L.any M.isJust $ L.map bFieldDb $ bModelFields o)
    , "addFormEntityLoader" .= bModelAddFormEntityLoader o
    , "editFormEntityLoader" .= bModelEditFormEntityLoader o
    , "deleteFormEntityLoader" .= bModelDeleteFormEntityLoader o
    , "addFormDataJsonUrl" .= bModelAddFormDataJsonUrl o
    , "editFormDataJsonUrl" .= bModelEditFormDataJsonUrl o
    , "deleteFormDataJsonUrl" .= bModelDeleteFormDataJsonUrl o
    , "addFormHasDefaultModel" .= bModelAddFormHasDefaultModel o
    , "editPostLoadsModel" .= bModelEditPostLoadsModel o
    , "deletePostLoadsModel" .= bModelDeletePostLoadsModel o
    , "parentHsType" .= bModelParentHsType o
    , "parentHsParamId" .= (case bModelParentHsType o of
                              Just parentHsType -> lowerFirst $ Text.append parentHsType "Id"
                              _ -> "")
    , "formHasProgressBar" .= (any (\field -> bFieldHsType field == "FileInfo") $ bModelFields o)
    ]


data BTranslation = BTranslation
  { bTranslationKey :: Text
  , bTranslationDe :: Text
  , bTranslationEn :: Text
  }

instance ToJSON BTranslation where
  toJSON o = object
    [ "key" .= bTranslationKey o
    , "keyCap" .= (upperFirst $ bTranslationKey o)
    , "de" .= bTranslationDe o
    , "en" .= bTranslationEn o
    ]


data BFieldDb = BFieldDb
  { bFieldDbIsNullable :: Bool
  , bFieldDbDefault :: Maybe Text
  , bFieldDbCanUpdate :: Bool
  }

instance ToJSON BFieldDb where
  toJSON o = object
    [ "isNullable" .= bFieldDbIsNullable o
    , "isNotNullable" .= (not $ bFieldDbIsNullable o)
    , "default" .= bFieldDbDefault o
    , "canUpdate" .= bFieldDbCanUpdate o
    ]

data BFieldAddView = BFieldAddView
  { bFieldAddViewIsRequired :: Bool
  , bFieldAddViewIsDisabled :: Bool
  , bFieldAddViewAttrs :: [BFieldAttr]
  , bFieldAddViewDefault :: Maybe Text
  }

instance ToJSON BFieldAddView where
  toJSON o = object
    [ "isRequired" .= bFieldAddViewIsRequired o
    , "isOptional" .= (not $ bFieldAddViewIsRequired o)
    , "isDisabled" .= bFieldAddViewIsDisabled o
    , "isEnabled" .= (not $ bFieldAddViewIsDisabled o)
    , "attrs" .= ((if bFieldAddViewIsDisabled o then [BFieldAttr "disabled" ""] else [])
                   ++ bFieldAddViewAttrs o)
    , "default" .= bFieldAddViewDefault o
    ]

data BFieldEditView = BFieldEditView
  { bFieldEditViewIsRequired :: Bool
  , bFieldEditViewIsDisabled :: Bool
  , bFieldEditViewAttrs :: [BFieldAttr]
  , bFieldEditViewDefault :: Maybe Text
  }

instance ToJSON BFieldEditView where
  toJSON o = object
    [ "isRequired" .= bFieldEditViewIsRequired o
    , "isOptional" .= (not $ bFieldEditViewIsRequired o)
    , "isDisabled" .= bFieldEditViewIsDisabled o
    , "isEnabled" .= (not $ bFieldEditViewIsDisabled o)
    , "attrs" .= ((if bFieldEditViewIsDisabled o then [BFieldAttr "disabled" ""] else [])
                   ++ bFieldEditViewAttrs o)
    , "default" .= bFieldEditViewDefault o
    ]

data BField = BField
  { bFieldName :: Text
  , bFieldLabelDe :: Maybe Text
  , bFieldLabelEn :: Maybe Text
  , bFieldHsType :: Text
  , bFieldDb :: Maybe BFieldDb
  , bFieldFormFieldType :: Maybe Text
  , bFieldAddView :: Maybe BFieldAddView
  , bFieldEditView :: Maybe BFieldEditView
  }

instance ToJSON BField where
  toJSON o = object
    [ "name" .= bFieldName o
    , "nameCap" .= (upperFirst $ bFieldName o)
    , "dbColumnName" .= (TC.toQuietSnake $ TC.fromAny (Text.unpack $ bFieldName o))
    , "labelDe" .= bFieldLabelDe o
    , "labelEn" .= bFieldLabelEn o
    , "hsType" .= bFieldHsType o
    , "db" .= bFieldDb o
    , "formFieldType" .= bFieldFormFieldType o
    , "addView" .= bFieldAddView o
    , "editView" .= bFieldEditView o
    , "isHsTypeBool" .= (bFieldHsType o == "Bool")
    , "isForeignKey" .= ((Text.takeEnd 2 $ bFieldName o) == "Id")
    ]

data BFieldAttr = BFieldAttr
  { bFieldAttrKey :: Text
  , bFieldAttrValue :: Text
  }

instance ToJSON BFieldAttr where
  toJSON o = object
    [ "key" .= bFieldAttrKey o
    , "value" .= bFieldAttrValue o
    ]

-- model context

context :: Value
context =
  toJSON $
  BContext
  { bContextModels =
      [ BModel
        { bModelName = "user"
        , bModelLabel = "User"
        , bModelIsJson = False
        , bModelDbUniquenesses = ["UniqueUser ident"]
        , bModelDbHasHistoryTable = True
        , bModelHsDerivings = []
        , bModelAddFormEntityLoader = Nothing
        , bModelEditFormEntityLoader = Nothing
        , bModelDeleteFormEntityLoader = Nothing
        , bModelAddFormDataJsonUrl = Nothing
        , bModelEditFormDataJsonUrl = Nothing
        , bModelDeleteFormDataJsonUrl = Just "MyprojectR AdminPageDataJsonR"
        , bModelAddFormHasDefaultModel = False
        , bModelEditPostLoadsModel = False
        , bModelDeletePostLoadsModel = False
        , bModelParentHsType = Nothing
        , bModelFields =
            [ BField
              { bFieldName = "ident"
              , bFieldLabelDe = Just "Login"
              , bFieldLabelEn = Just "Login"
              , bFieldHsType = "Text"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = False
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = True
                  }
              , bFieldFormFieldType = Just "textField"
              , bFieldAddView =
                  Just $
                  BFieldAddView
                  { bFieldAddViewIsRequired = True
                  , bFieldAddViewIsDisabled = False
                  , bFieldAddViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldAddViewDefault = Nothing
                  }
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = True
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            , BField
              { bFieldName = "password"
              , bFieldLabelDe = Just "Passwort"
              , bFieldLabelEn = Just "Password"
              , bFieldHsType = "Text"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = True
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = False
                  }
              , bFieldFormFieldType = Nothing
              , bFieldAddView = Nothing
              , bFieldEditView = Nothing
              }
            , BField
              { bFieldName = "email"
              , bFieldLabelDe = Just "Email"
              , bFieldLabelEn = Just "Email"
              , bFieldHsType = "Text"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = False
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = True
                  }
              , bFieldFormFieldType = Just "textField"
              , bFieldAddView =
                  Just $
                  BFieldAddView
                  { bFieldAddViewIsRequired = True
                  , bFieldAddViewIsDisabled = False
                  , bFieldAddViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldAddViewDefault = Nothing
                  }
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = True
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            , BField
              { bFieldName = "isResetPassword"
              , bFieldLabelDe = Just "Neues Passwort generieren?"
              , bFieldLabelEn = Just "Generate new password?"
              , bFieldHsType = "Bool"
              , bFieldDb = Nothing
              , bFieldFormFieldType = Just "checkBoxField"
              , bFieldAddView = Nothing
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = True
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue = "uk-checkbox"
                        }
                      ]
                  , bFieldEditViewDefault = Just "Nothing"
                  }
              }
            ]
        }
      , BModel
        { bModelName = "config"
        , bModelLabel = "Config"
        , bModelIsJson = True
        , bModelDbUniquenesses = ["UniqueCode code"]
        , bModelDbHasHistoryTable = True
        , bModelHsDerivings = []
        , bModelAddFormEntityLoader = Nothing
        , bModelEditFormEntityLoader = Nothing
        , bModelDeleteFormEntityLoader = Nothing
        , bModelAddFormDataJsonUrl = Nothing
        , bModelEditFormDataJsonUrl = Just "MyprojectR AdminPageDataJsonR"
        , bModelDeleteFormDataJsonUrl = Nothing
        , bModelAddFormHasDefaultModel = False
        , bModelEditPostLoadsModel = False
        , bModelDeletePostLoadsModel = False
        , bModelParentHsType = Nothing
        , bModelFields =
            [ BField
              { bFieldName = "code"
              , bFieldLabelDe = Just "Code"
              , bFieldLabelEn = Just "Code"
              , bFieldHsType = "Text"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = False
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = False
                  }
              , bFieldFormFieldType = Just "textField"
              , bFieldAddView = Nothing
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = False
                  , bFieldEditViewIsDisabled = True
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            , BField
              { bFieldName = "stringValue"
              , bFieldLabelDe = Just "String-Wert"
              , bFieldLabelEn = Just "String-Value"
              , bFieldHsType = "Text"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = True
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = True
                  }
              , bFieldFormFieldType = Just "textField"
              , bFieldAddView =
                  Just $
                  BFieldAddView
                  { bFieldAddViewIsRequired = False
                  , bFieldAddViewIsDisabled = False
                  , bFieldAddViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldAddViewDefault = Nothing
                  }
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = False
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-large uk-input uk-form-small"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            , BField
              { bFieldName = "intValue"
              , bFieldLabelDe = Just "Integer-Wert"
              , bFieldLabelEn = Just "Integer-Value"
              , bFieldHsType = "Int"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = True
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = True
                  }
              , bFieldFormFieldType = Just "intField"
              , bFieldAddView =
                  Just $
                  BFieldAddView
                  { bFieldAddViewIsRequired = False
                  , bFieldAddViewIsDisabled = False
                  , bFieldAddViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-medium uk-input uk-form-small"
                        }
                      ]
                  , bFieldAddViewDefault = Nothing
                  }
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = False
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-medium uk-input uk-form-small"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            , BField
              { bFieldName = "doubleValue"
              , bFieldLabelDe = Just "Double-Wert"
              , bFieldLabelEn = Just "Double-Value"
              , bFieldHsType = "Double"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = True
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = True
                  }
              , bFieldFormFieldType = Just "doubleField"
              , bFieldAddView =
                  Just $
                  BFieldAddView
                  { bFieldAddViewIsRequired = False
                  , bFieldAddViewIsDisabled = False
                  , bFieldAddViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-medium uk-input uk-form-small"
                        }
                      ]
                  , bFieldAddViewDefault = Nothing
                  }
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = False
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue =
                            "uk-form-width-medium uk-input uk-form-small"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            , BField
              { bFieldName = "boolValue"
              , bFieldLabelDe = Just "Boolean-Wert"
              , bFieldLabelEn = Just "Boolean-Value"
              , bFieldHsType = "Bool"
              , bFieldDb =
                  Just $
                  BFieldDb
                  { bFieldDbIsNullable = False
                  , bFieldDbDefault = Nothing
                  , bFieldDbCanUpdate = True
                  }
              , bFieldFormFieldType = Just "checkBoxField"
              , bFieldAddView =
                  Just $
                  BFieldAddView
                  { bFieldAddViewIsRequired = True
                  , bFieldAddViewIsDisabled = False
                  , bFieldAddViewAttrs = []
                  , bFieldAddViewDefault = Nothing
                  }
              , bFieldEditView =
                  Just $
                  BFieldEditView
                  { bFieldEditViewIsRequired = True
                  , bFieldEditViewIsDisabled = False
                  , bFieldEditViewAttrs =
                      [ BFieldAttr
                        { bFieldAttrKey = "class"
                        , bFieldAttrValue = "uk-checkbox"
                        }
                      ]
                  , bFieldEditViewDefault = Nothing
                  }
              }
            ]
        }
      ]
  , bContextTranslations =
    [ BTranslation { bTranslationKey = "home", bTranslationDe = "Home", bTranslationEn = "Home" }
    , BTranslation { bTranslationKey = "admin", bTranslationDe = "Admin", bTranslationEn = "Admin" }
    , BTranslation { bTranslationKey = "logout", bTranslationDe = "Logout", bTranslationEn = "Logout" }
    , BTranslation { bTranslationKey = "myProfile", bTranslationDe = "Mein profil", bTranslationEn = "My Profile" }
    , BTranslation { bTranslationKey = "users", bTranslationDe = "Nutzer", bTranslationEn = "Users" }
    , BTranslation { bTranslationKey = "addUser", bTranslationDe = "Nutzer hinzufügen", bTranslationEn = "Add user" }
    , BTranslation { bTranslationKey = "editUser", bTranslationDe = "Nutzer bearbeiten", bTranslationEn = "Edit user" }
    , BTranslation { bTranslationKey = "deleteUser", bTranslationDe = "Nutzer löschen", bTranslationEn = "Delete user" }
    , BTranslation { bTranslationKey = "configurations", bTranslationDe = "Konfigurationen", bTranslationEn = "Configurations" }
    , BTranslation { bTranslationKey = "editConfig", bTranslationDe = "Konfiguration bearbeiten", bTranslationEn = "Edit config" }
    ]
  }

{-# START_FILE package.yaml #-}
name:    {{name}}
version: "0.0.0"

dependencies:

# Due to a bug in GHC 8.0.1, we block its usage
# See: https://ghc.haskell.org/trac/ghc/ticket/12130
- base >=4.8.2.0 && <4.9 || >=4.9.1.0 && <5

# version 1.0 had a bug in reexporting Handler, causing trouble
- classy-prelude-yesod >=0.10.2 && <1.0 || >=1.1

- yesod >=1.4.3 && <1.5
- yesod-core >=1.4.30 && <1.5
- yesod-auth >=1.4.0 && <1.5
- yesod-static >=1.4.0.3 && <1.6
- yesod-form >=1.4.0 && <1.5
- classy-prelude >=0.10.2
- classy-prelude-conduit >=0.10.2
- bytestring >=0.9 && <0.11
- text >=0.11 && <2.0
- persistent >=2.0 && <2.8
- persistent-postgresql >=2.1.1 && <2.8
- persistent-template >=2.0 && <2.8
- template-haskell
- shakespeare >=2.0 && <2.1
- hjsmin >=0.1 && <0.3
- monad-control >=0.3 && <1.1
- wai-extra >=3.0 && <3.1
- yaml >=0.8 && <0.9
- http-conduit >=2.1 && <2.3
- directory >=1.1 && <1.4
- warp >=3.0 && <3.3
- data-default
- aeson >=0.6 && <1.3
- conduit >=1.0 && <2.0
- monad-logger >=0.3 && <0.4
- fast-logger >=2.2 && <2.5
- wai-logger >=2.2 && <2.4
- file-embed
- safe
- unordered-containers
- containers
- vector
- time
- case-insensitive
- wai
- foreign-store
- yesod-auth-hashdb
- pwstore-fast
- transformers
- conduit-extra
- MonadRandom
- blaze-html
- mime-mail
- esqueleto

# The library contains all of our application code. The executable
# defined below is just a thin wrapper.
library:
  source-dirs: src
  when:
  - condition: (flag(dev)) || (flag(library-only))
    then:
      ghc-options:
      - -Wall
      - -fwarn-tabs
      - -O0
      cpp-options: -DDEVELOPMENT
    else:
      ghc-options:
      - -Wall
      - -fwarn-tabs
      - -O2

# Runnable executable for our application
executables:
  {{name}}:
    main: main.hs
    source-dirs: app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    when:
    - condition: flag(library-only)
      buildable: false

# Test suite
tests:
  {{name}}-test:
    main: Spec.hs
    source-dirs: test
    ghc-options: -Wall
    dependencies:
    - {{name}}
    - hspec >=2.0.0
    - yesod-test

# Define flags used by "yesod devel" to make compilation faster
flags:
  library-only:
    description: Build for use with "yesod devel"
    manual: false
    default: false
  dev:
    description: Turn on development settings, like auto-reload templates.
    manual: false
    default: false

{-# START_FILE postgresql_setup.sql #-}
-- gen triggers - start




drop function public.process_audit_user() cascade;
create or replace function public.process_audit_user()
 returns trigger
 language plpgsql
as $function$
   begin
       if to_regclass('user_history') is not null then
           if (TG_OP = 'UPDATE' or TG_OP = 'INSERT') then
                insert into user_history
                       (id, ident, password, email, version, created_at, created_by, updated_at, updated_by)
                       values
                       (new.id, new.ident, new.password, new.email, new.version, new.created_at, new.created_by, new.updated_at, new.updated_by);
                return new;
            end if;
       end if;
       return null; -- result is ignored since this is an after trigger
    end;
$function$;

create trigger audit_user after insert or update on public.user for each row execute procedure public.process_audit_user();



drop function public.process_audit_config() cascade;
create or replace function public.process_audit_config()
 returns trigger
 language plpgsql
as $function$
   begin
       if to_regclass('config_history') is not null then
           if (TG_OP = 'UPDATE' or TG_OP = 'INSERT') then
                insert into config_history
                       (id, code, string_value, int_value, double_value, bool_value, version, created_at, created_by, updated_at, updated_by)
                       values
                       (new.id, new.code, new.string_value, new.int_value, new.double_value, new.bool_value, new.version, new.created_at, new.created_by, new.updated_at, new.updated_by);
                return new;
            end if;
       end if;
       return null; -- result is ignored since this is an after trigger
    end;
$function$;

create trigger audit_config after insert or update on public.config for each row execute procedure public.process_audit_config();

-- gen triggers - end

{-# START_FILE run_dev.sh #-}
#!/bin/sh

which yesod
if test $? -ne 0; then
    stack build yesod-bin
fi

stack clean

PGUSER={{name}} \
    PGPASS={{name}} \
    PGDATABASE={{name}} \
    stack exec -- yesod devel

{-# START_FILE run_gen.sh #-}
#!/bin/sh

export LC_ALL=C.UTF-8

cd hs-generator

if test -f ginger.tar; then
    tar -xf ginger.tar
    rm ginger.tar
fi

yesod_dir=..

tmp_file=/tmp/hs-generator.tmp

stack build hs-generator
if test $? -ne 0; then
    exit 1
fi
generator_exec=`find . -name hs-generator -type f`

exec_ginger2() {
    model_name=$1
    template_file=$2
    tmp_file_name=tmp-`cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32`.gtmpl
    echo "{%- set model = ${model_name}Model -%}" > ginger/$tmp_file_name
    cat ginger/$template_file >> ginger/$tmp_file_name
    exec_ginger $tmp_file_name "$3" "$4" "$5"
    rm ginger/tmp-*.gtmpl
}

exec_ginger() {
    template_file=$1
    dest_file=$yesod_dir/$2
    if test ! -f ginger/$template_file; then
        echo "Error: template file missing: $template_file"
        exit 1
    fi
    echo $dest_file
    if test -n "$3"; then
        if test -n "$4"; then
	    comment_start="$3"
	    comment_end="$4"
        else
	    comment_start="$3 - start"
	    comment_end="$3 - end"
        fi
    fi
    $generator_exec $template_file > $tmp_file
    # stack exec -- runghc src/Main.hs $template_file > $tmp_file
    if test ! -f $dest_file; then
        touch $dest_file
    fi
    if test -n "$3"; then
        grep -q -- "$comment_start" $dest_file
        if test ! $? -eq 0; then
	    echo "$comment_start" >> $dest_file
	    echo "$comment_end" >> $dest_file
        fi
        sed -i -e "/$comment_start/,/$comment_end/{//p;d;}" $dest_file
        sed -i -e "/$comment_start/ r $tmp_file" $dest_file
    else
        cat $tmp_file > $dest_file
    fi
}

yesod_devel_pid=$(ps aux|grep 'yesod devel$'|grep -v grep|awk '{print $2}')
if test -n "$yesod_devel_pid"; then
    kill -TSTP $yesod_devel_pid
fi

exec_ginger debug_json.gtmpl context.json
exec_ginger models.gtmpl config/models_migrate '-- gen models'
exec_ginger postgresql_triggers.gtmpl postgresql_setup.sql '-- gen triggers'
exec_ginger riot_i18n_dict.gtmpl templates/riot_tags.hamlet 'gen i18n dict'
exec_ginger handler_common_i18n.gtmpl src/Handler/Common.hs '-- gen i18n global'

f=src/Handler/User.hs
m=user
if test -z "$1" -o "$1" = $m; then
    exec_ginger2 $m handler_data_add.gtmpl $f '-- gen data add'
    exec_ginger2 $m handler_get_add_form.gtmpl $f '-- gen get add form'
    exec_ginger2 $m handler_data_edit.gtmpl $f '-- gen data edit'
    exec_ginger2 $m handler_add_form.gtmpl $f '-- gen add form'
    exec_ginger2 $m handler_get_edit_form.gtmpl $f '-- gen get edit form'
    exec_ginger2 $m handler_edit_form.gtmpl $f '-- gen edit form'
    exec_ginger2 $m handler_get_delete_form.gtmpl $f '-- gen get delete form'
    exec_ginger2 $m handler_post_delete_form.gtmpl $f '-- gen post delete form'
    exec_ginger2 $m handler_delete_form.gtmpl $f '-- gen delete form'
fi

f=src/Handler/Config.hs
m=config
if test -z "$1" -o "$1" = $m; then
    exec_ginger2 $m handler_data_edit.gtmpl $f '-- gen data edit'
    exec_ginger2 $m handler_get_edit_form.gtmpl $f '-- gen get edit form'
    exec_ginger2 $m handler_post_edit_form.gtmpl $f '-- gen post edit form'
    exec_ginger2 $m handler_edit_form.gtmpl $f '-- gen edit form'
fi




if test -n "$yesod_devel_pid"; then
    sleep 1
    kill -CONT $yesod_devel_pid
fi

{-# START_FILE run_passwd.sh #-}
#!/bin/sh

if test $# -eq 0; then
    echo "usage: $0 <passwd> [<passwd>] ..."
    exit 1
fi

stack runhaskell app/passwd.hs $*

{-# START_FILE run_pgsql.sh #-}
#!/bin/sh

uname -a | grep -q Darwin
if test $? -eq 0; then
    # sudo su postgres -c '/opt/local/lib/postgresql95/bin/createuser --createdb --encrypted --no-inherit --login --pwprompt --no-createrole --no-superuser --no-replication {{name}}'
    # sudo su postgres -c '/opt/local/lib/postgresql95/bin/createdb --encoding=UTF-8 --owner={{name}} --template=template0 {{name}}'
    # sudo su postgres -c '/opt/local/lib/postgresql95/bin/psql -U {{name}} {{name}}'
    # sudo su postgres -c '/opt/local/lib/postgresql95/bin/dropdb {{name}}'

    sudo su postgres -c 'EDITOR=emacs /opt/local/lib/postgresql95/bin/psql -U {{name}} {{name}}'
fi


uname -a | grep -q Ubuntu
if test $? -eq 0; then
    # sudo su postgres -c 'createuser --createdb --encrypted --no-inherit --login --pwprompt --no-createrole --no-superuser --no-replication {{name}}'
    # sudo su postgres -c 'createdb --encoding=UTF-8 --owner={{name}} --template=template0 {{name}}'
    sudo su postgres -c 'EDITOR=emacs psql -U {{name}} {{name}}'
fi

{-# START_FILE src/Application.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE RecordWildCards #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}
module Application
    ( getApplicationDev
    , appMain
    , develMain
    , makeFoundation
    , makeLogWare
    -- * for DevelMain
    , getApplicationRepl
    , shutdownApp
    -- * for GHCI
    , handler
    , db
    ) where

import Control.Monad.Logger                 (liftLoc, runLoggingT)
import Database.Persist.Postgresql          (createPostgresqlPool, pgConnStr,
                                             pgPoolSize, runSqlPool)
import Import
import Language.Haskell.TH.Syntax           (qLocation)
import Network.Wai (Middleware)
import Network.Wai.Handler.Warp             (Settings, defaultSettings,
                                             defaultShouldDisplayException,
                                             runSettings, setHost,
                                             setOnException, setPort, getPort)
import Network.Wai.Middleware.RequestLogger (Destination (Logger),
                                             IPAddrSource (..),
                                             OutputFormat (..), destination,
                                             mkRequestLogger, outputFormat)
import System.Log.FastLogger                (defaultBufSize, newStdoutLoggerSet,
                                             toLogStr)

-- Import all relevant handler modules here.
-- Don't forget to add new modules to your cabal file!
import Handler.Common
import Handler.Home
import Handler.Admin
import Handler.User
import Handler.Config
import Handler.InitDb
import Handler.MyProfile

-- This line actually creates our YesodDispatch instance. It is the second half
-- of the call to mkYesodData which occurs in Foundation.hs. Please see the
-- comments there for more details.
mkYesodDispatch "App" resourcesApp

-- | This function allocates resources (such as a database connection pool),
-- performs initialization and returns a foundation datatype value. This is also
-- the place to put your migrate statements to have automatic database
-- migrations handled by Yesod.
makeFoundation :: AppSettings -> IO App
makeFoundation appSettings = do
    -- Some basic initializations: HTTP connection manager, logger, and static
    -- subsite.
    appHttpManager <- newManager
    appLogger <- newStdoutLoggerSet defaultBufSize >>= makeYesodLogger
    appStatic <-
        (if appMutableStatic appSettings then staticDevel else static)
        (appStaticDir appSettings)

    -- We need a log function to create a connection pool. We need a connection
    -- pool to create our foundation. And we need our foundation to get a
    -- logging function. To get out of this loop, we initially create a
    -- temporary foundation without a real connection pool, get a log function
    -- from there, and then create the real foundation.
    let mkFoundation appConnPool = App {..}
        -- The App {..} syntax is an example of record wild cards. For more
        -- information, see:
        -- https://ocharles.org.uk/blog/posts/2014-12-04-record-wildcards.html
        tempFoundation = mkFoundation $ error "connPool forced in tempFoundation"
        logFunc = messageLoggerSource tempFoundation appLogger

    -- Create the database connection pool
    pool <- flip runLoggingT logFunc $ createPostgresqlPool
        (pgConnStr  $ appDatabaseConf appSettings)
        (pgPoolSize $ appDatabaseConf appSettings)

    -- Perform database migration using our application's logging settings.
    runLoggingT (runSqlPool (runMigration migrateAll) pool) logFunc

    -- Return the foundation
    return $ mkFoundation pool

-- | Convert our foundation to a WAI Application by calling @toWaiAppPlain@ and
-- applying some additional middlewares.
makeApplication :: App -> IO Application
makeApplication foundation = do
    logWare <- makeLogWare foundation
    -- Create the WAI application and apply middlewares
    appPlain <- toWaiAppPlain foundation
    return $ logWare $ defaultMiddlewaresNoLogging appPlain

makeLogWare :: App -> IO Middleware
makeLogWare foundation =
    mkRequestLogger def
        { outputFormat =
            if appDetailedRequestLogging $ appSettings foundation
                then Detailed True
                else Apache
                        (if appIpFromHeader $ appSettings foundation
                            then FromFallback
                            else FromSocket)
        , destination = Logger $ loggerSet $ appLogger foundation
        }


-- | Warp settings for the given foundation value.
warpSettings :: App -> Settings
warpSettings foundation =
      setPort (appPort $ appSettings foundation)
    $ setHost (appHost $ appSettings foundation)
    $ setOnException (\_req e ->
        when (defaultShouldDisplayException e) $ messageLoggerSource
            foundation
            (appLogger foundation)
            $(qLocation >>= liftLoc)
            "yesod"
            LevelError
            (toLogStr $ "Exception from Warp: " ++ show e))
      defaultSettings

-- | For yesod devel, return the Warp settings and WAI Application.
getApplicationDev :: IO (Settings, Application)
getApplicationDev = do
    settings <- getAppSettings
    foundation <- makeFoundation settings
    wsettings <- getDevSettings $ warpSettings foundation
    app <- makeApplication foundation
    return (wsettings, app)

getAppSettings :: IO AppSettings
getAppSettings = loadYamlSettings [configSettingsYml] [] useEnv

-- | main function for use by yesod devel
develMain :: IO ()
develMain = develMainHelper getApplicationDev

-- | The @main@ function for an executable running this site.
appMain :: IO ()
appMain = do
    -- Get the settings from all relevant sources
    settings <- loadYamlSettingsArgs
        -- fall back to compile-time values, set to [] to require values at runtime
        [configSettingsYmlValue]

        -- allow environment variables to override
        useEnv

    -- Generate the foundation from the settings
    foundation <- makeFoundation settings

    -- Generate a WAI Application from the foundation
    app <- makeApplication foundation

    -- Run the application with Warp
    runSettings (warpSettings foundation) app


--------------------------------------------------------------
-- Functions for DevelMain.hs (a way to run the app from GHCi)
--------------------------------------------------------------
getApplicationRepl :: IO (Int, App, Application)
getApplicationRepl = do
    settings <- getAppSettings
    foundation <- makeFoundation settings
    wsettings <- getDevSettings $ warpSettings foundation
    app1 <- makeApplication foundation
    return (getPort wsettings, foundation, app1)

shutdownApp :: App -> IO ()
shutdownApp _ = return ()


---------------------------------------------
-- Functions for use in development with GHCi
---------------------------------------------

-- | Run a handler
handler :: Handler a -> IO a
handler h = getAppSettings >>= makeFoundation >>= flip unsafeHandler h

-- | Run DB queries
db :: ReaderT SqlBackend Handler a -> IO a
db = handler . runDB

{-# START_FILE src/Foundation.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE ExplicitForAll #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE InstanceSigs #-}
{-# LANGUAGE QuasiQuotes #-}

module Foundation where

import Import.NoFoundation
import Database.Persist.Sql (ConnectionPool, runSqlPool)
import Text.Hamlet          (hamletFile)
import Text.Jasmine         (minifym)
import Control.Monad.Logger (LogSource)
import Yesod.Auth.Message   (AuthMessage(InvalidLogin))
import Control.Monad.Trans.Maybe

-- Used only when in "auth-dummy-login" setting is enabled.
-- import Yesod.Auth.Dummy

-- import Yesod.Auth.OpenId    (authOpenId, IdentifierType (Claimed))
import Yesod.Auth.HashDB
import Yesod.Default.Util   (addStaticContentExternal)
import Yesod.Core.Types     (Logger)
import qualified Yesod.Core.Unsafe as Unsafe
import Yesod.Form.I18n.German

-- | The foundation datatype for your application. This can be a good place to
-- keep settings and values requiring initialization before your application
-- starts running, such as database connections. Every handler will have
-- access to the data present here.
data App = App
    { appSettings    :: AppSettings
    , appStatic      :: Static -- ^ Settings for static file serving.
    , appConnPool    :: ConnectionPool -- ^ Database connection pool.
    , appHttpManager :: Manager
    , appLogger      :: Logger
    }

-- This is where we define all of the routes in our application. For a full
-- explanation of the syntax, please see:
-- http://www.yesodweb.com/book/routing-and-handlers
--
-- Note that this is really half the story; in Application.hs, mkYesodDispatch
-- generates the rest of the code. Please see the following documentation
-- for an explanation for this split:
-- http://www.yesodweb.com/book/scaffolding-and-the-site-template#scaffolding-and-the-site-template_foundation_and_application_modules
--
-- This function also generates the following type synonyms:
-- type Handler = HandlerT App IO
-- type Widget = WidgetT App IO ()
mkYesodData "App" $(parseRoutesFile "config/routes")

-- | A convenient synonym for creating forms.
type Form x = Html -> MForm (HandlerT App IO) (FormResult x, Widget)

-- | A convenient synonym for database access functions.
type DB a = forall (m :: * -> *).
    (MonadIO m, Functor m) => ReaderT SqlBackend m a

-- Please see the documentation for the Yesod typeclass. There are a number
-- of settings which can be configured by overriding methods here.
instance Yesod App where
    -- Controls the base of generated URLs. For more information on modifying,
    -- see: https://github.com/yesodweb/yesod/wiki/Overriding-approot
    approot :: Approot App
    approot = ApprootRequest $ \app req ->
        case appRoot $ appSettings app of
            Nothing -> getApprootText guessApproot app req
            Just root -> root

    -- Store session data on the client in encrypted cookies,
    -- default session idle timeout is 120 minutes
    makeSessionBackend :: App -> IO (Maybe SessionBackend)
    makeSessionBackend _ = Just <$> defaultClientSessionBackend
        120    -- timeout in minutes
        "config/client_session_key.aes"

    -- Yesod Middleware allows you to run code before and after each handler function.
    -- The defaultYesodMiddleware adds the response header "Vary: Accept, Accept-Language" and performs authorization checks.
    -- Some users may also want to add the defaultCsrfMiddleware, which:
    --   a) Sets a cookie with a CSRF token in it.
    --   b) Validates that incoming write requests include that token in either a header or POST parameter.
    -- To add it, chain it together with the defaultMiddleware: yesodMiddleware = defaultYesodMiddleware . defaultCsrfMiddleware
    -- For details, see the CSRF documentation in the Yesod.Core.Handler module of the yesod-core package.
    yesodMiddleware :: ToTypedContent res => Handler res -> Handler res
    yesodMiddleware = defaultYesodMiddleware . defaultCsrfMiddleware

    defaultLayout :: Widget -> Handler Html
    defaultLayout widget = do
        pc <- widgetToPageContent $ do
            addStylesheet $ StaticR css_local_css
            addScript $ StaticR js_local_js
            widget
        withUrlRenderer $(hamletFile "templates/riot-layout-wrapper.hamlet")

    -- The page to be redirected to when authentication is required.
    authRoute _ = Just $ AuthR LoginR

    isAuthorized (HomeR) _ = do
        _ <- requireAuthId
        return Authorized
    isAuthorized (MyprojectR _) _ = do
        _ <- requireAuthId
        return Authorized
    isAuthorized _ _ = return Authorized

    -- This function creates static content files in the static folder
    -- and names them based on a hash of their content. This allows
    -- expiration dates to be set far in the future without worry of
    -- users receiving stale content.
    addStaticContent
        :: Text  -- ^ The file extension
        -> Text -- ^ The MIME content type
        -> LByteString -- ^ The contents of the file
        -> Handler (Maybe (Either Text (Route App, [(Text, Text)])))
    addStaticContent ext mime content = do
        master <- getYesod
        let staticDir = appStaticDir $ appSettings master
        addStaticContentExternal
            minifym
            genFileName
            staticDir
            (StaticR . flip StaticRoute [])
            ext
            mime
            content
      where
        -- Generate a unique filename based on the content itself
        genFileName lbs = "autogen-" ++ base64md5 lbs

    -- What messages should be logged. The following includes all messages when
    -- in development, and warnings and errors in production.
    shouldLogIO :: App -> LogSource -> LogLevel -> IO Bool
    shouldLogIO app _source level =
        return $
        appShouldLogAll (appSettings app)
            || level == LevelWarn
            || level == LevelError

    makeLogger :: App -> IO Logger
    makeLogger = return . appLogger

formLayout :: WidgetT App IO () -> Handler Html
formLayout widget = do
    pc <- widgetToPageContent widget
    withUrlRenderer [hamlet|^{pageBody pc}|]

-- How to run database actions.
instance YesodPersist App where
    type YesodPersistBackend App = SqlBackend
    runDB :: SqlPersistT Handler a -> Handler a
    runDB action = do
        master <- getYesod
        runSqlPool action $ appConnPool master

instance YesodPersistRunner App where
    getDBRunner :: Handler (DBRunner App, Handler ())
    getDBRunner = defaultGetDBRunner appConnPool

instance YesodAuth App where
    type AuthId App = UserId

    authLayout widget = do
        pc <- widgetToPageContent widget
        withUrlRenderer $(hamletFile "templates/login-layout-wrapper.hamlet")

    -- Where to send a user after successful login
    loginDest :: App -> Route App
    loginDest _ = MyprojectR MyprojectHomeR
    -- Where to send a user after logout
    logoutDest :: App -> Route App
    logoutDest _ = MyprojectR MyprojectHomeR
    -- Override the above two destinations when a Referer: header is present
    redirectToReferer :: App -> Bool
    redirectToReferer _ = True

    -- authenticate :: (MonadHandler m, HandlerSite m ~ App)
    --              => Creds App -> m (AuthenticationResult App)
    authenticate creds = runDB $ do
        x <- getBy $ UniqueUser $ credsIdent creds
        case x of
            Just (Entity uid _) -> return $ Authenticated uid
            Nothing -> return $ UserError InvalidLogin

    -- You can add other plugins like Google Email, email or OAuth here
    authPlugins :: App -> [AuthPlugin App]
    authPlugins _ = [authHashDBWithForm myLoginForm (Just . UniqueUser)]

    -- authPlugins app = [authOpenId Claimed []] ++ extraAuthPlugins
    --     -- Enable authDummy login if enabled.
    --     where extraAuthPlugins = []

    authHttpManager = getHttpManager

    -- override, to avoid DB lookup on every request
    maybeAuthId = runMaybeT $ do
      s   <- MaybeT $ lookupSession credsKey
      aid <- MaybeT $ return $ fromPathPiece s
      return aid

myLoginForm :: Route App -> Widget
myLoginForm loginRoute = do
  request <- getRequest
  let maybeToken = reqToken request
  $(whamletFile "templates/login_form.hamlet")

-- | Access function to determine if a user is logged in.
isAuthenticated :: Handler AuthResult
isAuthenticated = do
    muid <- maybeAuthId
    return $ case muid of
        Nothing -> Unauthorized "You must login to access this page"
        Just _ -> Authorized

instance HashDBUser User where
    userPasswordHash = userPassword
    setPasswordHash h u = u { userPassword = Just h }

instance YesodAuthPersist App

-- This instance is required to use forms. You can modify renderMessage to
-- achieve customized and internationalized form validation messages.
-- instance RenderMessage App FormMessage where
--     renderMessage :: App -> [Lang] -> FormMessage -> Text
--     renderMessage _ _ = defaultFormMessage

instance RenderMessage App FormMessage where
  renderMessage :: App -> [Lang] -> FormMessage -> Text
  renderMessage _ []        = germanFormMessage -- Default to German
  renderMessage _ ("de":_) = germanFormMessage
  renderMessage _ ("en-US":_) = defaultFormMessage
  renderMessage master (_   :langs) = renderMessage master langs

-- Useful when writing code that is re-usable outside of the Handler context.
-- An example is background jobs that send email.
-- This can also be useful for writing code that works across multiple Yesod applications.
instance HasHttpManager App where
    getHttpManager :: App -> Manager
    getHttpManager = appHttpManager

unsafeHandler :: App -> Handler a -> IO a
unsafeHandler = Unsafe.fakeHandlerGetLogger appLogger

-- Note: Some functionality previously present in the scaffolding has been
-- moved to documentation in the Wiki. Following are some hopefully helpful
-- links:
--
-- https://github.com/yesodweb/yesod/wiki/Sending-email
-- https://github.com/yesodweb/yesod/wiki/Serve-static-files-from-a-separate-domain
-- https://github.com/yesodweb/yesod/wiki/i18n-messages-in-the-scaffolding

{-# START_FILE src/Handler/Admin.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.Admin where

import Handler.Common
import Import
import qualified Database.Esqueleto as E
import qualified Data.Text.Encoding as TE
import qualified Data.CaseInsensitive as CI

getAdminR :: Handler Html
getAdminR = defaultLayout $ do
  toWidget [whamlet|
                   <body-tag>
                   <script>
                     \ riot.compile(function() {
                     \   bodyTag = riot.mount('body-tag')[0]
                     \   bodyTag.refreshData("@{MyprojectR $ AdminPageDataJsonR}")
                     \ })
                   |]

getAdminPageDataJsonR :: Handler Value
getAdminPageDataJsonR = do
  Entity _ user <- requireAuth
  req <- getRequest
  appName <- runDB $ configAppName
  urlRenderer <- getUrlRender
  mainNavItems <- mainNavData MainNavAdmin
  jDataUsers <- userListJDataEnts
  jDataConfigs <- configListJDataEnts
  let pages =
        defaultDataPages
        { jDataPageAdmin =
            Just $ JDataPageAdmin
            { jDataPageAdminUsers = jDataUsers
            , jDataPageAdminConfigs = jDataConfigs
            }
        }
  msgHome <- localizedMsg MsgGlobalHome
  msgAdmin <- localizedMsg MsgGlobalAdmin
  returnJson JData
    { jDataAppName = appName
    , jDataUserIdent = userIdent user
    , jDataMainNavItems = mainNavItems
    , jDataSubNavItems = []
    , jDataPages = pages
    , jDataHistoryState = Just JDataHistoryState
      { jDataHistoryStateUrl = urlRenderer $ MyprojectR AdminR
      , jDataHistoryStateTitle = msgAdmin
      }
    , jDataCsrfHeaderName = TE.decodeUtf8 $ CI.original defaultCsrfHeaderName
    , jDataCsrfToken = reqToken req
    , jDataBreadcrumbItems = [ JDataBreadcrumbItem
                               { jDataBreadcrumbItemLabel = msgHome
                               , jDataBreadcrumbItemDataUrl = urlRenderer $ MyprojectR HomePageDataJsonR }
                             , JDataBreadcrumbItem
                               { jDataBreadcrumbItemLabel = msgAdmin
                               , jDataBreadcrumbItemDataUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
                             ]
    }

userListJDataEnts :: Handler [JDataUser]
userListJDataEnts = do
  urlRenderer <- getUrlRender
  userTuples <- runDB loadUserListTuples
  let jUserList = map (\(userEnt@(Entity userId _)) ->
                           JDataUser
                           { jDataUserEnt = userEnt
                           , jDataUserEditFormUrl = urlRenderer $ MyprojectR $ EditUserFormR userId
                           , jDataUserDeleteFormUrl = urlRenderer $ MyprojectR $ DeleteUserFormR userId
                           }
                        ) userTuples
  return jUserList

loadUserListTuples :: YesodDB App [(Entity User)]
loadUserListTuples = do
  tuples <- E.select $ E.from $ \(user) -> do
    E.orderBy [E.asc (user E.^. UserId)]
    return (user)
  return tuples

configListJDataEnts :: Handler [JDataConfig]
configListJDataEnts = do
  urlRenderer <- getUrlRender
  configTuples <- runDB loadConfigListTuples
  let jConfigList = map (\(configEnt@(Entity configId _)) ->
                           JDataConfig
                           { jDataConfigEnt = configEnt
                           , jDataConfigEditFormUrl = urlRenderer $ MyprojectR $ EditConfigFormR configId
                           }
                        ) configTuples
  return jConfigList

loadConfigListTuples :: YesodDB App [(Entity Config)]
loadConfigListTuples = do
  tuples <- E.select $ E.from $ \(config) -> do
    E.orderBy [E.asc (config E.^. ConfigId)]
    return (config)
  return tuples

{-# START_FILE src/Handler/Common.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
{-# LANGUAGE FlexibleContexts      #-}

module Handler.Common where

import Data.FileEmbed (embedFile)
import Import
import qualified Crypto.PasswordStore as Crypto
import qualified Data.ByteString.Char8 as BSC
import Control.Monad.Random
import qualified Data.Char as C
import qualified Data.List as L
import qualified Data.Text as T
import Text.Printf
import qualified Data.Maybe as M
import qualified Data.Conduit.Binary as CB
import qualified Data.ByteString as B
import Data.Time

-- These handlers embed files in the executable at compile time to avoid a
-- runtime dependency, and for efficiency.

getFaviconR :: Handler TypedContent
getFaviconR = do cacheSeconds $ 60 * 60 * 24 * 30 -- cache for a month
                 return $ TypedContent "image/x-icon"
                        $ toContent $(embedFile "config/favicon.ico")

getRobotsR :: Handler TypedContent
getRobotsR = return $ TypedContent typePlain
                    $ toContent $(embedFile "config/robots.txt")


data VPostSubmitSuccess = VPostSubmitSuccess
  { fsPostSuccessDataJsonUrl :: Text
  }
instance ToJSON VPostSubmitSuccess where
  toJSON o = object
    [ "dataJsonUrl" .= fsPostSuccessDataJsonUrl o
    ]

data VFormSubmitSuccess = VFormSubmitSuccess
  { fsSuccessDataJsonUrl :: Text
  }
instance ToJSON VFormSubmitSuccess where
  toJSON o = object
    [ "isFormValid" .= True
    , "dataJsonUrl" .= fsSuccessDataJsonUrl o
    ]

data VFormSubmitInvalid = VFormSubmitInvalid
  { fsInvalidModalWidgetHtml :: Text
  }
instance ToJSON VFormSubmitInvalid where
  toJSON o = object
    [ "modalWidgetHtml" .= fsInvalidModalWidgetHtml o
    ]

data VFormSubmitStale = VFormSubmitStale
  { fsStaleDataJsonUrl :: Text
  }
instance ToJSON VFormSubmitStale where
  toJSON o = object
    [ "isStaleObjectState" .= True
    , "dataJsonUrl" .= fsStaleDataJsonUrl o
    ]


data JData = JData
  { jDataAppName :: Text
  , jDataUserIdent :: Text
  , jDataMainNavItems :: [JDataNavItem]
  , jDataSubNavItems :: [JDataNavItem]
  , jDataPages :: JDataPages
  , jDataHistoryState :: Maybe JDataHistoryState
  , jDataCsrfToken :: Maybe Text
  , jDataCsrfHeaderName :: Text
  , jDataBreadcrumbItems :: [JDataBreadcrumbItem]
  }
instance ToJSON JData where
  toJSON o = object
    [ "appName" .= jDataAppName o
    , "userIdent" .= jDataUserIdent o
    , "mainNavItems" .= jDataMainNavItems o
    , "subNavItems" .= jDataSubNavItems o
    , "pages" .= jDataPages o
    , "historyState" .= jDataHistoryState o
    , "csrfHeaderName" .= jDataCsrfHeaderName o
    , "csrfToken" .= jDataCsrfToken o
    , "breadcrumbItems" .= jDataBreadcrumbItems o
    ]

data JDataNavItem = JDataNavItem
  { jDataNavItemLabel :: Text
  , jDataNavItemIsActive :: Bool
  , jDataNavItemPageDataUrl :: Text
  , jDataNavItemBadge :: Maybe Text
  }
instance ToJSON JDataNavItem where
  toJSON o = object
    [ "label" .= jDataNavItemLabel o
    , "isActive" .= jDataNavItemIsActive o
    , "dataUrl" .= jDataNavItemPageDataUrl o
    , "badge" .= jDataNavItemBadge o
    ]


data JDataBreadcrumbItem = JDataBreadcrumbItem
  { jDataBreadcrumbItemLabel :: Text
  , jDataBreadcrumbItemDataUrl :: Text
  }
instance ToJSON JDataBreadcrumbItem where
  toJSON o = object
    [ "label" .= jDataBreadcrumbItemLabel o
    , "dataUrl" .= jDataBreadcrumbItemDataUrl o
    ]


data JDataHistoryState = JDataHistoryState
  { jDataHistoryStateUrl :: Text
  , jDataHistoryStateTitle :: Text
  }
instance ToJSON JDataHistoryState where
  toJSON o = object
    [ "url" .= jDataHistoryStateUrl o
    , "title" .= jDataHistoryStateTitle o
    ]

instance ToJSON User where
  toJSON o = object
    [ "ident" .= userIdent o
    , "email" .= userEmail o
    ]

data JDataPages = JDataPages
  { jDataPageHome :: Maybe JDataPageHome
  , jDataPageAdmin :: Maybe JDataPageAdmin
  }
instance ToJSON JDataPages where
  toJSON o = object
    [ "home" .= jDataPageHome o
    , "admin" .= jDataPageAdmin o
    ]

defaultDataPages :: JDataPages
defaultDataPages = JDataPages
  { jDataPageHome = Nothing
  , jDataPageAdmin = Nothing
  }


data JDataPageHome = JDataPageHome
  { jDataPageHomeContent :: Text
  }
instance ToJSON JDataPageHome where
  toJSON o = object
    [ "content" .= jDataPageHomeContent o
    ]


data JDataPageAdmin = JDataPageAdmin
  { jDataPageAdminUsers :: [JDataUser]
  , jDataPageAdminConfigs :: [JDataConfig]
  }
instance ToJSON JDataPageAdmin where
  toJSON o = object
    [ "users" .= jDataPageAdminUsers o
    , "configs" .= jDataPageAdminConfigs o
    ]


data JDataUser = JDataUser
  { jDataUserEnt :: Entity User
  , jDataUserEditFormUrl :: Text
  , jDataUserDeleteFormUrl :: Text
  }
instance ToJSON JDataUser where
  toJSON o = object
    [ "entity" .= entityIdToJSON (jDataUserEnt o)
    , "editFormUrl" .= jDataUserEditFormUrl o
    , "deleteFormUrl" .= jDataUserDeleteFormUrl o
    ]


data JDataConfig = JDataConfig
  { jDataConfigEnt :: Entity Config
  , jDataConfigEditFormUrl :: Text
  }
instance ToJSON JDataConfig where
  toJSON o = object
    [ "entity" .= entityIdToJSON (jDataConfigEnt o)
    , "editFormUrl" .= jDataConfigEditFormUrl o
    ]






--------------------------------------------------------------------------------
-- navigation helpers
--------------------------------------------------------------------------------

data MainNav
  = MainNavHome
  | MainNavAdmin
  deriving (Eq)

mainNavData :: MainNav -> Handler [JDataNavItem]
mainNavData mainNav = do
  urlRenderer <- getUrlRender
  msgHome <- localizedMsg MsgGlobalHome
  msgAdmin <- localizedMsg MsgGlobalAdmin
  return
    [ JDataNavItem
      { jDataNavItemLabel = msgHome
      , jDataNavItemIsActive = mainNav == MainNavHome
      , jDataNavItemPageDataUrl = urlRenderer $ MyprojectR HomePageDataJsonR
      , jDataNavItemBadge = Nothing
      }
    , JDataNavItem
      { jDataNavItemLabel = msgAdmin
      , jDataNavItemIsActive = mainNav == MainNavAdmin
      , jDataNavItemPageDataUrl = urlRenderer $ MyprojectR AdminPageDataJsonR
      , jDataNavItemBadge = Nothing
      }
    ]
  where

rnd :: (RandomGen g) => Int -> Int -> Rand g Int
rnd x y = getRandomR (x, y)

randomMixedCaseString :: Int -> IO String
randomMixedCaseString len = do
  values <- evalRandIO (sequence (replicate len $ rnd 65 90))
  let str = toLower $ map C.chr values
  -- in average in every 2 chars is an uppercase char
  str' <- upcaseChars (quot len 2) str
  return str'
  where
    upcaseChars :: Int -> String -> IO String
    upcaseChars countChars str =
      if countChars == 0 then
        return str
      else do
        p <- evalRandIO $ rnd 0 (length str - 2)
        let (prefix, c:suffix) = splitAt p str
        upcaseChars (countChars-1) (prefix ++ toUpper [c] ++ suffix)

cryptoHashText :: Text -> IO Text
cryptoHashText text = do
  strHash <- Crypto.makePassword (BSC.pack $ unpack text) 17
  return $ decodeUtf8 strHash

generatePassword :: Int -> IO (Text, Text)
generatePassword len = do
  passwdStr <- randomMixedCaseString len
  passwdHash <- cryptoHashText $ pack passwdStr
  return (pack passwdStr, passwdHash)

renderUrlToText :: Route App -> Handler Text
renderUrlToText route = do
  renderUrl <- getUrlRender
  return $ renderUrl route

constTextField :: (Monad m, RenderMessage (HandlerSite m) FormMessage) => Text -> Field m Text
constTextField myText = Field
    { fieldParse = parseHelper $ \_ -> Right myText
    , fieldView = \theId name attrs _ isReq -> toWidget [hamlet|
$newline never
<input id="#{theId}" name="#{name}" *{attrs} type="text" step=1 :isReq:required="" value="#{myText}">
|]
    , fieldEnctype = UrlEncoded
    }

dbSystemUser :: Text
dbSystemUser = "system"

groupEntities :: [(Entity a, Entity b)] -> [(Entity a, [Entity b])]
groupEntities es =
  L.map ((\(es1, es2) -> (L.head es1, es2)) . L.unzip) $
  L.groupBy (\(Entity id1 _, _) (Entity id2 _, _) -> id1 == id2) es

groupEntitiesMaybe :: [(Entity a, Maybe (Entity b))] -> [(Entity a, [Entity b])]
groupEntitiesMaybe es =
  L.map ((\(es1, es2) -> (L.head es1, M.catMaybes es2)) . L.unzip) $
  L.groupBy (\(Entity id1 _, _) (Entity id2 _, _) -> id1 == id2) es

fileBytes :: FileInfo -> Handler B.ByteString
fileBytes fileInfo = do
  bytesL <- runResourceT $ fileSource fileInfo $$ CB.sinkLbs
  return $ toStrict bytesL

humanReadableBytes :: Integer -> String
humanReadableBytes size
  | null pairs = printf "%.0fZiB" (size'/1024^(7::Integer))
  | otherwise  = if unit == "" then printf "%dB" size
                 else printf "%.1f%sB" n unit
  where
    (n, unit):_ = pairs
    pairs = zip (L.iterate (/1024) size') units
    size' = fromIntegral size :: Double
    units = ["","KB","MB","GB","TB","PB","EB","ZB"] :: [String]

getCurrentDay :: IO Day
getCurrentDay = getCurrentTime >>= return . utctDay

--------------------------------------------------------------------------------
-- config helpers
--------------------------------------------------------------------------------

maybeConfigText :: Text -> YesodDB App (Maybe Text)
maybeConfigText code = do
  maybeConfigEnt <- selectFirst [ConfigCode ==. code] []
  case maybeConfigEnt of
    Just (Entity _ (Config {configStringValue = result})) -> return result
    Nothing -> return Nothing

maybeConfigInt :: Text -> YesodDB App (Maybe Int)
maybeConfigInt code = do
  maybeConfigEnt <- selectFirst [ConfigCode ==. code] []
  case maybeConfigEnt of
    Just (Entity _ (Config {configIntValue = result})) -> return result
    Nothing -> return Nothing

maybeConfigDouble :: Text -> YesodDB App (Maybe Double)
maybeConfigDouble code = do
  maybeConfigEnt <- selectFirst [ConfigCode ==. code] []
  case maybeConfigEnt of
    Just (Entity _ (Config {configDoubleValue = result})) -> return result
    Nothing -> return Nothing

configBool :: Text -> YesodDB App Bool
configBool code = do
  maybeConfigEnt <- selectFirst [ConfigCode ==. code] []
  case maybeConfigEnt of
    Just (Entity _ (Config {configBoolValue = result})) -> return result
    Nothing -> return False

configAppName :: YesodDB App Text
configAppName = do
  maybeResult <- maybeConfigText "app_name"
  case maybeResult  of
    Just result -> return result
    Nothing -> return ""

configEmailFrom :: YesodDB App Text
configEmailFrom = do
  maybeResult <- maybeConfigText "email_from"
  case maybeResult  of
    Just result -> return result
    Nothing -> return ""

configMehrwertSteuer :: YesodDB App Double
configMehrwertSteuer = do
  maybeResult <- maybeConfigDouble "mehrwert_steuer"
  case maybeResult  of
    Just result -> return result
    Nothing -> return 0

maybeTextToText :: Maybe Text -> Text
maybeTextToText Nothing = ""
maybeTextToText (Just t) = t

--------------------------------------------------------------------------------
-- format helpers
--------------------------------------------------------------------------------

dayFormatGerman :: String
dayFormatGerman = "%d.%m.%Y"

yearMonthFormatGerman :: String
yearMonthFormatGerman = "%m.%Y"

dayFormatHtml5 :: String
dayFormatHtml5 = "%Y-%m-%d"

formatDay :: Day -> Text
formatDay = pack . formatTime defaultTimeLocale dayFormatGerman

formatYearMonth :: Day -> Text
formatYearMonth = pack . formatTime defaultTimeLocale yearMonthFormatGerman

formatMaybeDay :: Maybe Day -> Text
formatMaybeDay (Just day) = formatDay day
formatMaybeDay _ = ""

formatLocalTime :: TimeZone -> UTCTime -> String
formatLocalTime timeZone utcTime = formatTime defaultTimeLocale "%d.%m.%Y %H:%M:%S" $ utcToLocalTime timeZone utcTime

formatLocalTimeDayPart :: TimeZone -> UTCTime -> String
formatLocalTimeDayPart timeZone utcTime = formatTime defaultTimeLocale "%d.%m.%Y" $ utcToLocalTime timeZone utcTime

formatDouble :: Double -> Text
formatDouble x = T.replace "." "," (pack $ printf "%.2f" x)

formatMaybeDouble :: Maybe Double -> Text
formatMaybeDouble (Just x) = formatDouble x
formatMaybeDouble _ = ""

formatMaybeInt :: Maybe Int -> Text
formatMaybeInt (Just x) = pack $ show x
formatMaybeInt _ = ""

formatEuro :: Double -> Text
formatEuro x = formatDouble x ++ " €"

formatMaybeEuro :: Maybe Double -> Text
formatMaybeEuro (Just x) = formatEuro x
formatMaybeEuro _ = ""

formatDoublePercent :: Double -> Text
formatDoublePercent x = formatDouble x ++ " %"


localizedMsg :: MsgGlobal -> Handler Text
localizedMsg message = do
  master <- getYesod
  langs <- languages
  return $ renderMessage master langs message

-- gen i18n global - start
data MsgGlobal =
  MsgGlobalHome
  | MsgGlobalAdmin
  | MsgGlobalLogout
  | MsgGlobalMyProfile
  | MsgGlobalUsers
  | MsgGlobalAddUser
  | MsgGlobalEditUser
  | MsgGlobalDeleteUser
  | MsgGlobalConfigurations
  | MsgGlobalEditConfig

instance RenderMessage App MsgGlobal where
  renderMessage _ []        = renderGlobalGerman
  renderMessage _ ("de":_) = renderGlobalGerman
  renderMessage _ ("en-US":_) = renderGlobalEnglish
  renderMessage m (_   :ls) = renderMessage m ls

renderGlobalGerman :: MsgGlobal -> Text
renderGlobalGerman MsgGlobalHome = "Home"
renderGlobalGerman MsgGlobalAdmin = "Admin"
renderGlobalGerman MsgGlobalLogout = "Logout"
renderGlobalGerman MsgGlobalMyProfile = "Mein profil"
renderGlobalGerman MsgGlobalUsers = "Nutzer"
renderGlobalGerman MsgGlobalAddUser = "Nutzer hinzufügen"
renderGlobalGerman MsgGlobalEditUser = "Nutzer bearbeiten"
renderGlobalGerman MsgGlobalDeleteUser = "Nutzer löschen"
renderGlobalGerman MsgGlobalConfigurations = "Konfigurationen"
renderGlobalGerman MsgGlobalEditConfig = "Konfiguration bearbeiten"

renderGlobalEnglish :: MsgGlobal -> Text
renderGlobalEnglish MsgGlobalHome = "Home"
renderGlobalEnglish MsgGlobalAdmin = "Admin"
renderGlobalEnglish MsgGlobalLogout = "Logout"
renderGlobalEnglish MsgGlobalMyProfile = "My Profile"
renderGlobalEnglish MsgGlobalUsers = "Users"
renderGlobalEnglish MsgGlobalAddUser = "Add user"
renderGlobalEnglish MsgGlobalEditUser = "Edit user"
renderGlobalEnglish MsgGlobalDeleteUser = "Delete user"
renderGlobalEnglish MsgGlobalConfigurations = "Configurations"
renderGlobalEnglish MsgGlobalEditConfig = "Edit config"

-- gen i18n global - end

{-# START_FILE src/Handler/Config.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.Config where

import Handler.Common
import Import
import qualified Text.Blaze.Html.Renderer.Text as Blaze
import Database.Persist.Sql (updateWhereCount)

-------------------------------------------------------
-- edit config
-------------------------------------------------------

-- gen data edit - start
data VEditConfig = VEditConfig
  { vEditConfigCode :: Maybe Text
  , vEditConfigStringValue :: Maybe Text
  , vEditConfigIntValue :: Maybe Int
  , vEditConfigDoubleValue :: Maybe Double
  , vEditConfigBoolValue :: Bool
  , vEditConfigVersion :: Int
  }
-- gen data edit - end

-- gen get edit form - start
getEditConfigFormR :: ConfigId -> Handler Html
getEditConfigFormR configId = do
  config <- runDB $ get404 configId
  (formWidget, _) <- generateFormPost $ vEditConfigForm $ Just config
  formLayout $ do
    toWidget [whamlet|
      <h1>Edit Config
      <form #modal-form .uk-form-horizontal method=post onsubmit="return false;" action=@{MyprojectR $ EditConfigR configId}>
        <div #modal-form-widget>
          ^{formWidget}
      |]
-- gen get edit form - end

-- gen post edit form - start
postEditConfigR :: ConfigId -> Handler Value
postEditConfigR configId = do
  ((result, formWidget), _) <- runFormPost $ vEditConfigForm Nothing
  case result of
    FormSuccess vEditConfig -> do
      curTime <- liftIO getCurrentTime
      Entity _ authUser <- requireAuth
      urlRenderer <- getUrlRender
      let persistFields = [
            ConfigStringValue =. vEditConfigStringValue vEditConfig
            , ConfigIntValue =. vEditConfigIntValue vEditConfig
            , ConfigDoubleValue =. vEditConfigDoubleValue vEditConfig
            , ConfigBoolValue =. vEditConfigBoolValue vEditConfig
            , ConfigVersion =. vEditConfigVersion vEditConfig + 1
            , ConfigUpdatedAt =. curTime
            , ConfigUpdatedBy =. userIdent authUser
            ]
      updateCount <- runDB $ updateWhereCount [ ConfigId ==. configId
                                              , ConfigVersion ==. vEditConfigVersion vEditConfig
                                              ] persistFields
      if updateCount == 1
        then returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
        else returnJson $ VFormSubmitStale { fsStaleDataJsonUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
    _ -> do
      resultHtml <- formLayout [whamlet|^{formWidget}|]
      returnJson $ VFormSubmitInvalid
        { fsInvalidModalWidgetHtml = toStrict $ Blaze.renderHtml resultHtml }

-- gen post edit form - end

-- gen edit form - start
vEditConfigForm :: Maybe Config -> Html -> MForm Handler (FormResult VEditConfig, Widget)
vEditConfigForm maybeConfig extra = do
  (codeResult, codeView) <- mopt textField
    codeFs
    (Just $ configCode <$> maybeConfig)
  (stringValueResult, stringValueView) <- mopt textField
    stringValueFs
    (configStringValue <$> maybeConfig)
  (intValueResult, intValueView) <- mopt intField
    intValueFs
    (configIntValue <$> maybeConfig)
  (doubleValueResult, doubleValueView) <- mopt doubleField
    doubleValueFs
    (configDoubleValue <$> maybeConfig)
  (boolValueResult, boolValueView) <- mreq checkBoxField
    boolValueFs
    (configBoolValue <$> maybeConfig)
  (versionResult, versionView) <- mreq hiddenField
    versionFs
    (configVersion <$> maybeConfig)
  let vEditConfigResult = VEditConfig <$> codeResult <*> stringValueResult <*> intValueResult <*> doubleValueResult <*> boolValueResult <*> versionResult
  let formWidget = toWidget [whamlet|
    #{extra}
    ^{fvInput versionView}
    <div .uk-margin-small :not $ null $ fvErrors codeView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors codeView:.uk-text-danger for=#{fvId codeView}>#{fvLabel codeView}
      <div .uk-form-controls>
        ^{fvInput codeView}
        $maybe err <- fvErrors codeView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors stringValueView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors stringValueView:.uk-text-danger for=#{fvId stringValueView}>#{fvLabel stringValueView}
      <div .uk-form-controls>
        ^{fvInput stringValueView}
        $maybe err <- fvErrors stringValueView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors intValueView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors intValueView:.uk-text-danger for=#{fvId intValueView}>#{fvLabel intValueView}
      <div .uk-form-controls>
        ^{fvInput intValueView}
        $maybe err <- fvErrors intValueView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors doubleValueView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors doubleValueView:.uk-text-danger for=#{fvId doubleValueView}>#{fvLabel doubleValueView}
      <div .uk-form-controls>
        ^{fvInput doubleValueView}
        $maybe err <- fvErrors doubleValueView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors boolValueView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors boolValueView:.uk-text-danger for=#{fvId boolValueView}>#{fvLabel boolValueView}
      <div .uk-form-controls>
        ^{fvInput boolValueView}
        $maybe err <- fvErrors boolValueView
          &nbsp;#{err}
    |]
  return (vEditConfigResult, formWidget)
  where
    codeFs :: FieldSettings App
    codeFs = FieldSettings
      { fsLabel = SomeMessage MsgEditConfigCode
      , fsTooltip = Nothing
      , fsId = Just "code"
      , fsName = Just "code"
      , fsAttrs = [ ("disabled",""), ("class","uk-form-width-large uk-input uk-form-small") ]
      }
    stringValueFs :: FieldSettings App
    stringValueFs = FieldSettings
      { fsLabel = SomeMessage MsgEditConfigStringValue
      , fsTooltip = Nothing
      , fsId = Just "stringValue"
      , fsName = Just "stringValue"
      , fsAttrs = [ ("class","uk-form-width-large uk-input uk-form-small") ]
      }
    intValueFs :: FieldSettings App
    intValueFs = FieldSettings
      { fsLabel = SomeMessage MsgEditConfigIntValue
      , fsTooltip = Nothing
      , fsId = Just "intValue"
      , fsName = Just "intValue"
      , fsAttrs = [ ("class","uk-form-width-medium uk-input uk-form-small") ]
      }
    doubleValueFs :: FieldSettings App
    doubleValueFs = FieldSettings
      { fsLabel = SomeMessage MsgEditConfigDoubleValue
      , fsTooltip = Nothing
      , fsId = Just "doubleValue"
      , fsName = Just "doubleValue"
      , fsAttrs = [ ("class","uk-form-width-medium uk-input uk-form-small") ]
      }
    boolValueFs :: FieldSettings App
    boolValueFs = FieldSettings
      { fsLabel = SomeMessage MsgEditConfigBoolValue
      , fsTooltip = Nothing
      , fsId = Just "boolValue"
      , fsName = Just "boolValue"
      , fsAttrs = [ ("class","uk-checkbox") ]
      }
    versionFs :: FieldSettings App
    versionFs = FieldSettings
      { fsLabel = ""
      , fsTooltip = Nothing
      , fsId = Just "version"
      , fsName = Just "version"
      , fsAttrs = []
      }

data MsgEditConfig =
  MsgEditConfigCode
  | MsgEditConfigStringValue
  | MsgEditConfigIntValue
  | MsgEditConfigDoubleValue
  | MsgEditConfigBoolValue

instance RenderMessage App MsgEditConfig where
  renderMessage _ []        = renderEditConfigGerman
  renderMessage _ ("de":_) = renderEditConfigGerman
  renderMessage _ ("en-US":_) = renderEditConfigEnglish
  renderMessage m (_   :ls) = renderMessage m ls

renderEditConfigGerman :: MsgEditConfig -> Text
renderEditConfigGerman MsgEditConfigCode = "Code"
renderEditConfigGerman MsgEditConfigStringValue = "String-Wert"
renderEditConfigGerman MsgEditConfigIntValue = "Integer-Wert"
renderEditConfigGerman MsgEditConfigDoubleValue = "Double-Wert"
renderEditConfigGerman MsgEditConfigBoolValue = "Boolean-Wert"


renderEditConfigEnglish :: MsgEditConfig -> Text
renderEditConfigEnglish MsgEditConfigCode = "Code"
renderEditConfigEnglish MsgEditConfigStringValue = "String-Value"
renderEditConfigEnglish MsgEditConfigIntValue = "Integer-Value"
renderEditConfigEnglish MsgEditConfigDoubleValue = "Double-Value"
renderEditConfigEnglish MsgEditConfigBoolValue = "Boolean-Value"

-- gen edit form - end

{-# START_FILE src/Handler/Home.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.Home where

import Handler.Common
import Import
import Text.Hamlet (hamletFile)
import qualified Data.Text.Encoding as TE
import qualified Data.CaseInsensitive as CI

getHomeR :: Handler Html
getHomeR = redirect $ MyprojectR MyprojectHomeR

getMyprojectHomeR :: Handler Html
getMyprojectHomeR = defaultLayout $ do
  toWidget [whamlet|
                   <body-tag>
                   <script>
                     \ riot.compile(function() {
                     \   bodyTag = riot.mount('body-tag')[0]
                     \   bodyTag.refreshData("@{MyprojectR $ HomePageDataJsonR}")
                     \ })
                   |]

getHomePageDataJsonR :: Handler Value
getHomePageDataJsonR = do
  Entity _ user <- requireAuth
  req <- getRequest
  appName <- runDB $ configAppName
  urlRenderer <- getUrlRender
  mainNavItems <- mainNavData MainNavHome
  let pages = defaultDataPages
        { jDataPageHome = Just $ JDataPageHome { jDataPageHomeContent = "todo" }
        }
  msgHome <- localizedMsg MsgGlobalHome
  returnJson JData
    { jDataAppName = appName
    , jDataUserIdent = userIdent user
    , jDataMainNavItems = mainNavItems
    , jDataSubNavItems = []
    , jDataPages = pages
    , jDataHistoryState = Just JDataHistoryState
      { jDataHistoryStateUrl = urlRenderer $ MyprojectR MyprojectHomeR
      , jDataHistoryStateTitle = msgHome
      }
    , jDataCsrfHeaderName = TE.decodeUtf8 $ CI.original defaultCsrfHeaderName
    , jDataCsrfToken = reqToken req
    , jDataBreadcrumbItems = [ JDataBreadcrumbItem
                               { jDataBreadcrumbItemLabel = msgHome
                               , jDataBreadcrumbItemDataUrl = urlRenderer $ MyprojectR HomePageDataJsonR }
                             ]
    }

getRiotTagsR :: Handler Html
getRiotTagsR = withUrlRenderer $(hamletFile "templates/riot_tags.hamlet")

{-# START_FILE src/Handler/InitDb.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.InitDb where

import Import
import Handler.Common

getInitDbR :: Text -> Handler ()
getInitDbR adminEmail = do
  curTime <- liftIO getCurrentTime
  runDB $ do
    userCount <- count ([] :: [Filter User])
    if userCount == 0 then
      ( do
        (adminPasswd, adminPasswdHash) <- liftIO $ generatePassword 32
        _ <- insert $ User { userIdent = "admin"
                           , userPassword = (Just adminPasswdHash)
                           , userEmail = adminEmail
                           , userVersion = 1
                           , userCreatedAt = curTime
                           , userCreatedBy = dbSystemUser
                           , userUpdatedAt = curTime
                           , userUpdatedBy = dbSystemUser
                           }
        $(logError) $ "###############################"
        $(logError) $ "admin login:         admin"
        $(logError) $ "admin password:      " ++ adminPasswd
        $(logError) $ "admin password hash: " ++ adminPasswdHash
        $(logError) $ "admin email:         " ++ adminEmail
        $(logError) $ "###############################"
      )
      else return ()

    maybeConfigAppName <- selectFirst [ConfigCode ==. "app_name"] []
    case maybeConfigAppName of
      Nothing -> do
        let appName = "hs-{{name}}"
        _ <- insert $ Config { configCode = "app_name"
                             , configStringValue = Just appName
                             , configIntValue = Nothing
                             , configDoubleValue = Nothing
                             , configBoolValue = False
                             , configVersion = 1
                             , configCreatedAt = curTime
                             , configCreatedBy = dbSystemUser
                             , configUpdatedAt = curTime
                             , configUpdatedBy = dbSystemUser }
        return ()
      Just _  -> return ()

    maybeConfigEmailFrom <- selectFirst [ConfigCode ==. "email_from"] []
    case maybeConfigEmailFrom of
      Nothing -> do
        _ <- insert $ Config { configCode = "email_from"
                             , configStringValue = Just "info@example.com"
                             , configIntValue = Nothing
                             , configDoubleValue = Nothing
                             , configBoolValue = False
                             , configVersion = 1
                             , configCreatedAt = curTime
                             , configCreatedBy = dbSystemUser
                             , configUpdatedAt = curTime
                             , configUpdatedBy = dbSystemUser }
        return ()
      Just _ -> return ()
  redirect HomeR

{-# START_FILE src/Handler/Mailer.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.Mailer where

import Import
import Handler.Common
import Network.Mail.Mime
import Text.Shakespeare.Text (stext)
import Text.Blaze.Html.Renderer.Utf8 (renderHtml)
import qualified Data.ByteString.Lazy.Internal as LBS
import Control.Concurrent (forkIO)

sendPasswordNewAccountMail :: User -> Text -> Handler ()
sendPasswordNewAccountMail user passwd = do
  do
    loginUrl <- renderUrlToText $ AuthR LoginR
    appName <- runDB $ configAppName
    sendMail' (userEmail user)
      ("[" ++ appName ++ "] Neuer Nutzer angelegt")
      (textPartContent user appName loginUrl)
      (htmlPartContent user appName loginUrl)
  where
    textPartContent user' appName loginUrl = encodeUtf8
      [stext|
Lieber #{appName} Nutzer,

Für Sie wurde ein neuer Nutzer mit folgenden Daten angelegt:

Anmeldename:    #{userIdent user'}
Email:          #{userEmail user'}
Passwort:       #{passwd}

Sie können sich ab jetzt auf der #{appName} Seite einloggen:
#{loginUrl}

Mit freundlichen Grüßen,
Ihr #{appName} Team
      |]
    htmlPartContent user' appName loginUrl = renderHtml
      [shamlet|
<p>Lieber #{appName} Nutzer,
<p>Für Sie wurde ein neuer Nutzer mit folgenden Daten angelegt:
<p>Anmeldename:    #{userIdent user'}
  <br>
  Email:          #{userEmail user'}
  <br>
  Passwort:       #{passwd}
<p>Sie können sich ab jetzt auf der #{appName} Seite einloggen:
  <br>
  #{loginUrl}
<p>Mit freundlichen Grüßen,
  <br>
  Ihr #{appName} Team
      |]

sendPasswordResetMail :: User -> Text -> Handler ()
sendPasswordResetMail user passwd = do
  appName <- runDB $ configAppName
  sendMail' (userEmail user)
    ("[" ++ appName ++ "] Ihr Passwort wurde zurückgesetzt")
    (textPartContent user passwd appName)
    (htmlPartContent user passwd appName)
  where
    textPartContent user' passwd' appName = encodeUtf8
      [stext|
Lieber #{appName} Nutzer,

Ihr Passwort wurde zurückgesetzt:

Anmeldename:    #{userIdent user'}
Neues Passwort: #{passwd'}

Mit freundlichen Grüßen,
Ihr #{appName} Team
      |]
    htmlPartContent user' passwd' appName = renderHtml
      [shamlet|
<p>Lieber #{appName} Nutzer,
<p>Ihr Passwort wurde zurückgesetzt:
<p>Anmeldename:    #{userIdent user'}
  <br>
  Neues Passwort: #{passwd'}
<p>Mit freundlichen Grüßen,
  <br>
  Ihr #{appName} Team
      |]

sendMail' :: Text -> Text -> LBS.ByteString -> LBS.ByteString -> Handler ()
sendMail' to subject textPartContent htmlPartContent = do
  from <- runDB $ configEmailFrom
  _ <- liftIO $ forkIO $ renderSendMail (emptyMail $ Address Nothing from)
    { mailTo = [Address Nothing to]
    , mailHeaders =
         [ ("Subject", subject),
           ("Reply-To", from)
         ]
    , mailParts = [[textPart', htmlPart']] }
  return ()
  where
    textPart' = Part { partType = "text/plain; charset=utf-8"
                     , partEncoding = None
                     , partFilename = Nothing
                     , partContent = textPartContent
                     , partHeaders = [] }
    htmlPart' = Part { partType = "text/html; charset=utf-8"
                     , partEncoding = None
                     , partFilename = Nothing
                     , partContent = htmlPartContent
                     , partHeaders = [] }

{-# START_FILE src/Handler/MyProfile.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.MyProfile where

import Handler.Common
import Handler.Mailer
import Import

import qualified Text.Blaze.Html.Renderer.Text as Blaze
import Database.Persist.Sql (updateWhereCount)

postEditMyprofileR :: Handler Value
postEditMyprofileR = do
  ((result, formWidget), _) <- runFormPost $ vEditMyprofileForm Nothing
  case result of
    FormSuccess vEditMyprofile -> do
      curTime <- liftIO getCurrentTime
      Entity userId authUser <- requireAuth
      (passwd, passwdHash) <- liftIO $ generatePassword 32
      urlRenderer <- getUrlRender
      let persistFields =
            [ UserEmail =. vEditMyprofileEmail vEditMyprofile
            , UserVersion =. vEditMyprofileVersion vEditMyprofile + 1
            , UserUpdatedAt =. curTime
            , UserUpdatedBy =. userIdent authUser
            ]
      let persistFields' = persistFields ++ if vEditMyprofileIsResetPassword vEditMyprofile
                                            then [UserPassword =. (Just passwdHash)]
                                            else []
      updateCount <- runDB $ updateWhereCount [ UserId ==. userId
                                              , UserVersion ==. vEditMyprofileVersion vEditMyprofile
                                              ] persistFields'

      when (vEditMyprofileIsResetPassword vEditMyprofile) $ do
        user' <- runDB $ get404 userId
        sendPasswordResetMail user' passwd
      if updateCount == 1
        then returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ MyprojectR HomePageDataJsonR }
        else returnJson $ VFormSubmitStale { fsStaleDataJsonUrl = urlRenderer $ MyprojectR HomePageDataJsonR }
    _ -> do
      resultHtml <- formLayout [whamlet|^{formWidget}|]
      returnJson $ VFormSubmitInvalid
        { fsInvalidModalWidgetHtml = toStrict $ Blaze.renderHtml resultHtml }

data VEditMyprofile = VEditMyprofile
  { vEditMyprofileEmail :: Text
  , vEditMyprofileIsResetPassword :: Bool
  , vEditMyprofileVersion :: Int
  } deriving (Show)

getEditMyprofileFormR :: Handler Html
getEditMyprofileFormR = do
  Entity userId _ <- requireAuth
  myProfile <- runDB $ get404 userId
  (formWidget, _) <- generateFormPost $ vEditMyprofileForm $ Just myProfile
  formLayout $ do
    toWidget [whamlet|
      <h1>Mein Profil
      <form #modal-form .uk-form-horizontal method=post action=@{MyprojectR $ EditMyprofileR}>
        <div #modal-form-widget>
          ^{formWidget}
      |]

vEditMyprofileForm :: Maybe User -> Html -> MForm Handler (FormResult VEditMyprofile, Widget)
vEditMyprofileForm maybeUser extra = do
  (emailResult, emailView) <- mreq textField
    vMyprofileEmailFieldSettings
    (userEmail <$> maybeUser)
  (isResetPasswordResult, isResetPasswordView) <- mreq checkBoxField
    vMyprofileIsResetPasswordFieldSettings
    (Nothing)
  (versionResult, versionView) <- mreq hiddenField
    vMyprofileVersionFieldSettings
    (userVersion <$> maybeUser)
  let vEditMyprofileResult = VEditMyprofile <$> emailResult <*> isResetPasswordResult <*> versionResult
  let formWidget = toWidget [whamlet|
    #{extra}
    ^{fvInput versionView}
    <div .uk-margin-small :not $ null $ fvErrors emailView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors emailView:.uk-text-danger for=email>Email
      <div .uk-form-controls>
        ^{fvInput emailView}
        $maybe err <- fvErrors emailView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors isResetPasswordView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors isResetPasswordView:.uk-text-danger for=isResetPassword>Neues Passwort generieren?
      <div .uk-form-controls>
        ^{fvInput isResetPasswordView}
        $maybe err <- fvErrors isResetPasswordView
          &nbsp;#{err}
    |]
  return (vEditMyprofileResult, formWidget)
  where
    vMyprofileEmailFieldSettings :: FieldSettings App
    vMyprofileEmailFieldSettings = FieldSettings {
      fsLabel = "Email",
      fsTooltip = Nothing,
      fsId = Just "email",
      fsName = Just "email",
      fsAttrs = [ ("class","uk-form-width-large uk-input uk-form-small") ]
      }
    vMyprofileIsResetPasswordFieldSettings :: FieldSettings App
    vMyprofileIsResetPasswordFieldSettings = FieldSettings {
      fsLabel = "Neues Passwort generieren?",
      fsTooltip = Nothing,
      fsId = Just "isResetPassword",
      fsName = Just "isResetPassword",
      fsAttrs = [ ("class","uk-checkbox") ]
      }
    vMyprofileVersionFieldSettings :: FieldSettings App
    vMyprofileVersionFieldSettings = FieldSettings {
      fsLabel = "",
      fsTooltip = Nothing,
      fsId = Just "version",
      fsName = Just "version",
      fsAttrs = []
      }

{-# START_FILE src/Handler/User.hs #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude     #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# LANGUAGE QuasiQuotes           #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}

module Handler.User where

import Handler.Common
import Handler.Mailer
import Import

import qualified Text.Blaze.Html.Renderer.Text as Blaze
import Database.Persist.Sql (updateWhereCount)

-------------------------------------------------------
-- add user
-------------------------------------------------------

-- gen data add - start
data VAddUser = VAddUser
  { vAddUserIdent :: Text
  , vAddUserEmail :: Text
  }
-- gen data add - end

-- gen get add form - start
getAddUserFormR :: Handler Html
getAddUserFormR = do
  (formWidget, _) <- generateFormPost $ vAddUserForm Nothing
  formLayout $ do
    toWidget [whamlet|
      <h1>Add User
      <form #modal-form .uk-form-horizontal method=post onsubmit="return false;" action=@{MyprojectR $ AddUserR}>
        <div #modal-form-widget>
          ^{formWidget}
      |]
-- gen get add form - end

postAddUserR :: Handler Value
postAddUserR = do
  ((result, formWidget), _) <- runFormPost $ vAddUserForm Nothing
  case result of
    FormSuccess vAddUser -> do
      curTime <- liftIO getCurrentTime
      Entity _ authUser <- requireAuth
      (passwd, passwdHash) <- liftIO $ generatePassword 32
      urlRenderer <- getUrlRender
      let user = User {
            userIdent = vAddUserIdent vAddUser
            , userPassword = (Just passwdHash)
            , userEmail = vAddUserEmail vAddUser
            , userVersion = 1
            , userCreatedAt = curTime
            , userCreatedBy = userIdent authUser
            , userUpdatedAt = curTime
            , userUpdatedBy = userIdent authUser
            }
      _ <- runDB $ insert user
      sendPasswordNewAccountMail user passwd
      returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
    _ -> do
      resultHtml <- formLayout [whamlet|^{formWidget}|]
      returnJson $ VFormSubmitInvalid
        { fsInvalidModalWidgetHtml = toStrict $ Blaze.renderHtml resultHtml }

-- gen add form - start
vAddUserForm :: Maybe User -> Html -> MForm Handler (FormResult VAddUser, Widget)
vAddUserForm maybeUser extra = do
  (identResult, identView) <- mreq textField
    identFs
    (userIdent <$> maybeUser)
  (emailResult, emailView) <- mreq textField
    emailFs
    (userEmail <$> maybeUser)
  let vAddUserResult = VAddUser <$> identResult <*> emailResult
  let formWidget = toWidget [whamlet|
    #{extra}
    <div .uk-margin-small :not $ null $ fvErrors identView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors identView:.uk-text-danger for=#{fvId identView}>#{fvLabel identView}
      <div .uk-form-controls>
        ^{fvInput identView}
        $maybe err <- fvErrors identView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors emailView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors emailView:.uk-text-danger for=#{fvId emailView}>#{fvLabel emailView}
      <div .uk-form-controls>
        ^{fvInput emailView}
        $maybe err <- fvErrors emailView
          &nbsp;#{err}
    |]
  return (vAddUserResult, formWidget)
  where
    identFs :: FieldSettings App
    identFs = FieldSettings
      { fsLabel = SomeMessage MsgAddUserIdent
      , fsTooltip = Nothing
      , fsId = Just "ident"
      , fsName = Just "ident"
      , fsAttrs = [ ("class","uk-form-width-large uk-input uk-form-small") ]
      }
    emailFs :: FieldSettings App
    emailFs = FieldSettings
      { fsLabel = SomeMessage MsgAddUserEmail
      , fsTooltip = Nothing
      , fsId = Just "email"
      , fsName = Just "email"
      , fsAttrs = [ ("class","uk-form-width-large uk-input uk-form-small") ]
      }

data MsgAddUser =
  MsgAddUserIdent
  | MsgAddUserEmail

instance RenderMessage App MsgAddUser where
  renderMessage _ []        = renderAddUserGerman
  renderMessage _ ("de":_) = renderAddUserGerman
  renderMessage _ ("en-US":_) = renderAddUserEnglish
  renderMessage m (_   :ls) = renderMessage m ls

renderAddUserGerman :: MsgAddUser -> Text
renderAddUserGerman MsgAddUserIdent = "Login"
renderAddUserGerman MsgAddUserEmail = "Email"


renderAddUserEnglish :: MsgAddUser -> Text
renderAddUserEnglish MsgAddUserIdent = "Login"
renderAddUserEnglish MsgAddUserEmail = "Email"

-- gen add form - end

-------------------------------------------------------
-- edit user
-------------------------------------------------------

-- gen data edit - start
data VEditUser = VEditUser
  { vEditUserIdent :: Text
  , vEditUserEmail :: Text
  , vEditUserIsResetPassword :: Bool
  , vEditUserVersion :: Int
  }
-- gen data edit - end

-- gen get edit form - start
getEditUserFormR :: UserId -> Handler Html
getEditUserFormR userId = do
  user <- runDB $ get404 userId
  (formWidget, _) <- generateFormPost $ vEditUserForm $ Just user
  formLayout $ do
    toWidget [whamlet|
      <h1>Edit User
      <form #modal-form .uk-form-horizontal method=post onsubmit="return false;" action=@{MyprojectR $ EditUserR userId}>
        <div #modal-form-widget>
          ^{formWidget}
      |]
-- gen get edit form - end

postEditUserR :: UserId -> Handler Value
postEditUserR userId = do
  ((result, formWidget), _) <- runFormPost $ vEditUserForm Nothing
  case result of
    FormSuccess vEditUser -> do
      curTime <- liftIO getCurrentTime
      Entity _ authUser <- requireAuth
      (passwd, passwdHash) <- liftIO $ generatePassword 32
      urlRenderer <- getUrlRender
      let persistFields = [
            UserIdent =. vEditUserIdent vEditUser
            , UserEmail =. vEditUserEmail vEditUser
            , UserVersion =. vEditUserVersion vEditUser + 1
            , UserUpdatedAt =. curTime
            , UserUpdatedBy =. userIdent authUser
            ]
      let persistFields' = persistFields ++ if vEditUserIsResetPassword vEditUser
                                            then [UserPassword =. (Just passwdHash)]
                                            else []

      updateCount <- runDB $ updateWhereCount [ UserId ==. userId
                                              , UserVersion ==. vEditUserVersion vEditUser
                                              ] persistFields'

      when (vEditUserIsResetPassword vEditUser) $ do
        user' <- runDB $ get404 userId
        sendPasswordResetMail user' passwd
      if updateCount == 1
        then returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
        else returnJson $ VFormSubmitStale { fsStaleDataJsonUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
    _ -> do
      resultHtml <- formLayout [whamlet|^{formWidget}|]
      returnJson $ VFormSubmitInvalid
        { fsInvalidModalWidgetHtml = toStrict $ Blaze.renderHtml resultHtml }

-- gen edit form - start
vEditUserForm :: Maybe User -> Html -> MForm Handler (FormResult VEditUser, Widget)
vEditUserForm maybeUser extra = do
  (identResult, identView) <- mreq textField
    identFs
    (userIdent <$> maybeUser)
  (emailResult, emailView) <- mreq textField
    emailFs
    (userEmail <$> maybeUser)
  (isResetPasswordResult, isResetPasswordView) <- mreq checkBoxField
    isResetPasswordFs
    (Nothing)
  (versionResult, versionView) <- mreq hiddenField
    versionFs
    (userVersion <$> maybeUser)
  let vEditUserResult = VEditUser <$> identResult <*> emailResult <*> isResetPasswordResult <*> versionResult
  let formWidget = toWidget [whamlet|
    #{extra}
    ^{fvInput versionView}
    <div .uk-margin-small :not $ null $ fvErrors identView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors identView:.uk-text-danger for=#{fvId identView}>#{fvLabel identView}
      <div .uk-form-controls>
        ^{fvInput identView}
        $maybe err <- fvErrors identView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors emailView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors emailView:.uk-text-danger for=#{fvId emailView}>#{fvLabel emailView}
      <div .uk-form-controls>
        ^{fvInput emailView}
        $maybe err <- fvErrors emailView
          &nbsp;#{err}
    <div .uk-margin-small :not $ null $ fvErrors isResetPasswordView:.uk-form-danger>
      <label .uk-form-label :not $ null $ fvErrors isResetPasswordView:.uk-text-danger for=#{fvId isResetPasswordView}>#{fvLabel isResetPasswordView}
      <div .uk-form-controls>
        ^{fvInput isResetPasswordView}
        $maybe err <- fvErrors isResetPasswordView
          &nbsp;#{err}
    |]
  return (vEditUserResult, formWidget)
  where
    identFs :: FieldSettings App
    identFs = FieldSettings
      { fsLabel = SomeMessage MsgEditUserIdent
      , fsTooltip = Nothing
      , fsId = Just "ident"
      , fsName = Just "ident"
      , fsAttrs = [ ("class","uk-form-width-large uk-input uk-form-small") ]
      }
    emailFs :: FieldSettings App
    emailFs = FieldSettings
      { fsLabel = SomeMessage MsgEditUserEmail
      , fsTooltip = Nothing
      , fsId = Just "email"
      , fsName = Just "email"
      , fsAttrs = [ ("class","uk-form-width-large uk-input uk-form-small") ]
      }
    isResetPasswordFs :: FieldSettings App
    isResetPasswordFs = FieldSettings
      { fsLabel = SomeMessage MsgEditUserIsResetPassword
      , fsTooltip = Nothing
      , fsId = Just "isResetPassword"
      , fsName = Just "isResetPassword"
      , fsAttrs = [ ("class","uk-checkbox") ]
      }
    versionFs :: FieldSettings App
    versionFs = FieldSettings
      { fsLabel = ""
      , fsTooltip = Nothing
      , fsId = Just "version"
      , fsName = Just "version"
      , fsAttrs = []
      }

data MsgEditUser =
  MsgEditUserIdent
  | MsgEditUserEmail
  | MsgEditUserIsResetPassword

instance RenderMessage App MsgEditUser where
  renderMessage _ []        = renderEditUserGerman
  renderMessage _ ("de":_) = renderEditUserGerman
  renderMessage _ ("en-US":_) = renderEditUserEnglish
  renderMessage m (_   :ls) = renderMessage m ls

renderEditUserGerman :: MsgEditUser -> Text
renderEditUserGerman MsgEditUserIdent = "Login"
renderEditUserGerman MsgEditUserEmail = "Email"
renderEditUserGerman MsgEditUserIsResetPassword = "Neues Passwort generieren?"


renderEditUserEnglish :: MsgEditUser -> Text
renderEditUserEnglish MsgEditUserIdent = "Login"
renderEditUserEnglish MsgEditUserEmail = "Email"
renderEditUserEnglish MsgEditUserIsResetPassword = "Generate new password?"

-- gen edit form - end

-------------------------------------------------------
-- delete user
-------------------------------------------------------

-- gen delete form - start
vDeleteUserForm :: Html -> MForm Handler (FormResult (), Widget)
vDeleteUserForm extra = do
  let formResult = mempty
  let formWidget = [whamlet|#{extra} Really delete?|]
  return (formResult, formWidget)
-- gen delete form - end

-- gen get delete form - start
getDeleteUserFormR :: UserId -> Handler Html
getDeleteUserFormR userId = do
  (formWidget, _) <- generateFormPost $ vDeleteUserForm
  formLayout $ do
    toWidget [whamlet|
      <h1>Delete User
      <form #modal-form .uk-form-horizontal method=post action=@{MyprojectR $ DeleteUserR userId}>
        <div #modal-form-widget>
          ^{formWidget}
      |]
-- gen get delete form - end

-- gen post delete form - start
postDeleteUserR :: UserId -> Handler Value
postDeleteUserR userId = do
  runDB $ delete userId
  urlRenderer <- getUrlRender
  returnJson $ VFormSubmitSuccess { fsSuccessDataJsonUrl = urlRenderer $ MyprojectR AdminPageDataJsonR }
-- gen post delete form - end

{-# START_FILE src/Import.hs #-}
module Import
    ( module Import
    ) where

import Foundation            as Import
import Import.NoFoundation   as Import

{-# START_FILE src/Import/NoFoundation.hs #-}
{-# LANGUAGE CPP #-}
module Import.NoFoundation
    ( module Import
    ) where

import ClassyPrelude.Yesod   as Import
import ModelMigrate          as Import
import Settings              as Import
import Settings.StaticFiles  as Import
import Yesod.Auth            as Import
import Yesod.Core.Types      as Import (loggerSet)
import Yesod.Default.Config2 as Import

{-# START_FILE src/ModelMigrate.hs #-}
{-# LANGUAGE EmptyDataDecls             #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GADTs                      #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeFamilies               #-}
module ModelMigrate where

import ClassyPrelude.Yesod
import Database.Persist.Quasi

-- You can define all of your database entities in the entities file.
-- You can find more information on persistent and how to declare entities
-- at:
-- http://www.yesodweb.com/book/persistent/
share [mkPersist sqlSettings, mkMigrate "migrateAll"]
    $(persistFileWith lowerCaseSettings "config/models_migrate")

{-# START_FILE src/ModelNomigrate.hs #-}
{-# LANGUAGE EmptyDataDecls             #-}
{-# LANGUAGE FlexibleInstances          #-}
{-# LANGUAGE GADTs                      #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses      #-}
{-# LANGUAGE NoImplicitPrelude          #-}
{-# LANGUAGE OverloadedStrings          #-}
{-# LANGUAGE TemplateHaskell            #-}
{-# LANGUAGE TypeFamilies               #-}
module ModelNomigrate where

import ClassyPrelude.Yesod
import Database.Persist.Quasi

-- You can define all of your database entities in the entities file.
-- You can find more information on persistent and how to declare entities
-- at:
-- http://www.yesodweb.com/book/persistent/
share [mkPersist sqlSettings]
    $(persistFileWith lowerCaseSettings "config/models_nomigrate")

{-# START_FILE src/Settings.hs #-}
{-# LANGUAGE CPP               #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TemplateHaskell   #-}
-- | Settings are centralized, as much as possible, into this file. This
-- includes database connection settings, static file locations, etc.
-- In addition, you can configure a number of different aspects of Yesod
-- by overriding methods in the Yesod typeclass. That instance is
-- declared in the Foundation.hs file.
module Settings where

import           ClassyPrelude.Yesod
import qualified Control.Exception           as Exception
import           Data.Aeson                  (Result (..), fromJSON, withObject,
                                              (.!=), (.:?))
import           Data.FileEmbed              (embedFile)
import           Data.Yaml                   (decodeEither')
import           Database.Persist.Postgresql (PostgresConf)
import           Language.Haskell.TH.Syntax  (Exp, Name, Q)
import           Network.Wai.Handler.Warp    (HostPreference)
import           Yesod.Default.Config2       (applyEnvValue, configSettingsYml)
import           Yesod.Default.Util          (WidgetFileSettings,
                                              widgetFileNoReload,
                                              widgetFileReload)

-- | Runtime settings to configure this application. These settings can be
-- loaded from various sources: defaults, environment variables, config files,
-- theoretically even a database.
data AppSettings = AppSettings
    { appStaticDir              :: String
    -- ^ Directory from which to serve static files.
    , appDatabaseConf           :: PostgresConf
    -- ^ Configuration settings for accessing the database.
    , appRoot                   :: Maybe Text
    -- ^ Base for all generated URLs. If @Nothing@, determined
    -- from the request headers.
    , appHost                   :: HostPreference
    -- ^ Host/interface the server should bind to.
    , appPort                   :: Int
    -- ^ Port to listen on
    , appIpFromHeader           :: Bool
    -- ^ Get the IP address from the header when logging. Useful when sitting
    -- behind a reverse proxy.

    , appDetailedRequestLogging :: Bool
    -- ^ Use detailed request logging system
    , appShouldLogAll           :: Bool
    -- ^ Should all log messages be displayed?
    , appReloadTemplates        :: Bool
    -- ^ Use the reload version of templates
    , appMutableStatic          :: Bool
    -- ^ Assume that files in the static dir may change after compilation
    , appSkipCombining          :: Bool
    -- ^ Perform no stylesheet/script combining

    -- Example app-specific configuration values.
    -- , appCopyright              :: Text
    -- ^ Copyright text to appear in the footer of the page
    -- , appAnalytics              :: Maybe Text
    -- ^ Google Analytics code

    -- , appAuthDummyLogin         :: Bool
    -- ^ Indicate if auth dummy login should be enabled.
    }

instance FromJSON AppSettings where
    parseJSON = withObject "AppSettings" $ \o -> do
        let defaultDev =
#ifdef DEVELOPMENT
                True
#else
                False
#endif
        appStaticDir              <- o .: "static-dir"
        appDatabaseConf           <- o .: "database"
        appRoot                   <- o .:? "approot"
        appHost                   <- fromString <$> o .: "host"
        appPort                   <- o .: "port"
        appIpFromHeader           <- o .: "ip-from-header"

        dev                       <- o .:? "development"      .!= defaultDev

        appDetailedRequestLogging <- o .:? "detailed-logging" .!= dev
        appShouldLogAll           <- o .:? "should-log-all"   .!= dev
        appReloadTemplates        <- o .:? "reload-templates" .!= dev
        appMutableStatic          <- o .:? "mutable-static"   .!= dev
        appSkipCombining          <- o .:? "skip-combining"   .!= dev

        -- appCopyright              <- o .:  "copyright"
        -- appAnalytics              <- o .:? "analytics"

        -- appAuthDummyLogin         <- o .:? "auth-dummy-login"      .!= dev

        return AppSettings {..}

-- | Settings for 'widgetFile', such as which template languages to support and
-- default Hamlet settings.
--
-- For more information on modifying behavior, see:
--
-- https://github.com/yesodweb/yesod/wiki/Overriding-widgetFile
widgetFileSettings :: WidgetFileSettings
widgetFileSettings = def

-- | How static files should be combined.
combineSettings :: CombineSettings
combineSettings = def

-- The rest of this file contains settings which rarely need changing by a
-- user.

widgetFile :: String -> Q Exp
widgetFile = (if appReloadTemplates compileTimeAppSettings
                then widgetFileReload
                else widgetFileNoReload)
              widgetFileSettings

-- | Raw bytes at compile time of @config/settings.yml@
configSettingsYmlBS :: ByteString
configSettingsYmlBS = $(embedFile configSettingsYml)

-- | @config/settings.yml@, parsed to a @Value@.
configSettingsYmlValue :: Value
configSettingsYmlValue = either Exception.throw id
                       $ decodeEither' configSettingsYmlBS

-- | A version of @AppSettings@ parsed at compile time from @config/settings.yml@.
compileTimeAppSettings :: AppSettings
compileTimeAppSettings =
    case fromJSON $ applyEnvValue False mempty configSettingsYmlValue of
        Error e -> error e
        Success settings -> settings

-- The following two functions can be used to combine multiple CSS or JS files
-- at compile time to decrease the number of http requests.
-- Sample usage (inside a Widget):
--
-- > $(combineStylesheets 'StaticR [style1_css, style2_css])

combineStylesheets :: Name -> [Route Static] -> Q Exp
combineStylesheets = combineStylesheets'
    (appSkipCombining compileTimeAppSettings)
    combineSettings

combineScripts :: Name -> [Route Static] -> Q Exp
combineScripts = combineScripts'
    (appSkipCombining compileTimeAppSettings)
    combineSettings

{-# START_FILE src/Settings/StaticFiles.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TemplateHaskell   #-}
module Settings.StaticFiles where

import Settings     (appStaticDir, compileTimeAppSettings)
import Yesod.Static (staticFiles)

-- This generates easy references to files in the static directory at compile time,
-- giving you compile-time verification that referenced files exist.
-- Warning: any files added to your static directory during run-time can't be
-- accessed this way. You'll have to use their FilePath or URL to access them.
--
-- For example, to refer to @static/js/script.js@ via an identifier, you'd use:
--
--     js_script_js
--
-- If the identifier is not available, you may use:
--
--     StaticFile ["js", "script.js"] []
staticFiles (appStaticDir compileTimeAppSettings)

{-# START_FILE static/css/local.css #-}
/* Container
 ========================================================================== */
.uk-container {
  box-sizing: border-box;
  max-width: 5000px; /* changed ! */
  padding: 0 25px;
}
/* Large screen and bigger */
@media (min-width: 1220px) {
  .uk-container {
    max-width: 5000px; /* changed ! */
    padding: 0 35px;
  }
}
/*
 * Micro clearfix
 */
.uk-container:before,
.uk-container:after {
  content: "";
  display: table;
}
.uk-container:after {
  clear: both;
}
/*
 * Center container
 */
.uk-container-center {
  margin-left: auto;
  margin-right: auto;
}

/* Custom
 ========================================================================== */
th.uk-align-right {
    margin-bottom: 0px;
}

ul.uk-breadcrumb {
    margin-bottom: 0px;
}

.textarea-wrap {
    white-space: pre-wrap;
}

/* Tingle Modals
 ========================================================================== */
.tingle-modal {
    background: rgba(0, 0, 0, .3);
    transition: none;
}

.tingle-modal-box {
    transition: none;
    transform: none;
}

{-# START_FILE BASE64 static/js/local.js #-}
Cg==

{-# START_FILE static/js/riot-i18n.min.js #-}
!function(i,t){"function"==typeof define&&define.amd?define(["exports","riot"],function(n,e){t(i.i18n=n,e)}):"object"==typeof exports?t(exports,require("riot")):t(i.i18n={},i.riot)}(this,function(i,t){function n(){this._entities={},this._default=e,this._language=this._default;var i=t.observable();this.on=i.on,this.off=i.off,this.trigger=i.trigger,this.on("lang",this.setLanguage)}var e="en";n.prototype.dictionary=function(i){this._entities=i},n.prototype.defaultLanguage=function(i){this._default=i},n.prototype.localise=function(i,t){function n(i,t,e,s){s=s||"",t=t||{},e=e||0;var a=i&&!i.length,o=a?Object.keys(i).length:0;if(a&&o>0){var r;for(r in i)s.split(".").length>e&&(s=s.split(".").splice(0,e).join(".")),s=0==e?r:s+"."+r,t=n(i[r],t,e+1,s)}else t[s]=i;return t}var e,s;if(this._entities[this._language]||(e=i),e||(s=n(this._entities[this._language]),e=s[i]?s[i]:i),t){var a,o=n(t);for(a in o)e=e.replace(new RegExp("{"+a+"}","g"),o[a])}return e},n.prototype.setLanguage=function(i){this._language=i||this._default,this.trigger("update")},n.prototype.getLanguage=function(){return this._language};var s,a=new n;for(s in a)i[s]=a[s];t.mixin("i18n",{i18n:i}),t.tag2("i1-8n",'<span ref="localised" name="localised"></span> <span ref="original" name="original" class="original"><yield></yield></span>','i1-8n,[riot-tag="i1-8n"],[data-is="i1-8n"]{ display: inline-block; } i1-8n .original,[riot-tag="i1-8n"] .original,[data-is="i1-8n"] .original{ display: none; }',"",function(){this.mixin("i18n"),this.i18n.on("update",function(){this.update()}.bind(this)),this.on("mount",function(){this.hasRefs=void 0!=this.refs,this.localise()}),this.on("update",function(){this.localise()}),this.localise=function(){var i=this.hasRefs?this.refs:this;i.localised.innerHTML=this.i18n.localise(i.original.innerHTML)}})});
{-# START_FILE templates/login-layout-wrapper.hamlet #-}
<!doctype html>
<html class="no-js" lang="en">
  <head>
    <meta charset="UTF-8">
    <title>#{pageTitle pc}

  <body>
    ^{pageBody pc}

{-# START_FILE templates/login_form.hamlet #-}
<form method=post action=@{loginRoute}>
  $maybe token <- maybeToken
    <input type=hidden name=#{defaultCsrfParamName} value=#{token}>
    <input type="text" name="username" placeholder="Anmeldename" required autofocus>
    <input type="password" name="password" placeholder="Passwort" required>
    <button href="@{AuthR LoginR}">Login

{-# START_FILE templates/riot-layout-wrapper.hamlet #-}
<!doctype html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>{{name}}

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js" type="text/javascript">

    <link href="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.36/css/uikit.min.css" rel="stylesheet" type="text/css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.36/js/uikit.min.js" type="text/javascript">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/uikit/3.0.0-beta.36/js/uikit-icons.min.js" type="text/javascript">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/riot/3.7.4/riot+compiler.min.js" type="text/javascript">
    <script src="@{StaticR js_riot_i18n_min_js}" type="text/javascript">

    <link href="https://cdnjs.cloudflare.com/ajax/libs/tingle/0.12.0/tingle.min.css" rel="stylesheet" type="text/css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tingle/0.12.0/tingle.min.js" type="text/javascript">

    <script data-src="@{MyprojectR RiotTagsR}" type="riot/tag">
    ^{pageHead pc}

  <body>
    ^{pageBody pc}

{-# START_FILE templates/riot_tags.hamlet #-}
<body-tag>
  <div .uk-container .uk-margin-left if="{data}">
    <nav-tag>
    <home-page-tag>
    <admin-page-tag>
  <script>
    \ tag = this
    \ tag.data = null
    \ tag.refreshData = function(dataJsonUrl, storeInHistory, scrollToTop) {
    \   $.ajax({
    \     url: dataJsonUrl,
    \     type: "GET",
    \     dataType: "json",
    \   }).done(function(data, textStatus, jqXHR) {
    \     tag.data = data
    \     tag.update()
    \     if (scrollToTop) {
    \       window.scrollTo(0, 0)
    \     }
    \     if (data.historyState && storeInHistory) {
    \       window.history.pushState({dataJsonUrl: dataJsonUrl}, data.historyState.title, data.historyState.url);
    \     }
    \   }).fail(function(jqXHR, textStatus) {
    \     if (jqXHR.status == 401)
    \       window.location.href = "@{AuthR LoginR}"
    \     else
    \       alert("error" + jqXHR.status + " ------ " + textStatus)
    \   })
    \ }
    \ tag.showModalForm = function(modalFormUrl, dataJsonUrl) {
    \   var modal = new tingle.modal({
    \     footer: true,
    \     stickyFooter: true,
    \     cssClass: [],
    \     closeMethods: ['escape'],
    \   });
    \   $.get(modalFormUrl, function(data) {
    \     modal.setContent(data);
    \     modal.open();
    \   })
    \   modal.addFooterBtn('OK', 'tingle-btn tingle-btn--primary tingle-btn--pull-right', function() {
    \     var formElem = $("#modal-form");
    \     var serializedElems = formElem.serializeArray();
    \     var formData = new FormData();
    \     $.each($('input[type=file]'), function(i, field) {
    \       formData.append("file", field.files[0]);
    \     })
    \     $.each(serializedElems, function(i, field) {
    \       formData.append(field.name, field.value)
    \     })
    \     var progressBar = document.getElementById("modal-form-progressbar")
    \     var xhr = new XMLHttpRequest();
    \     xhr.open("POST", formElem.attr("action"), true);
    \     xhr.upload.onprogress = function(pe) {
    \       if(progressBar && pe.lengthComputable) {
    \         progressBar.max = pe.total
    \         progressBar.value = pe.loaded
    \       }
    \     }
    \     xhr.onload = function () {
    \       if (xhr.readyState === xhr.DONE) {
    \         if (xhr.status === 200) {
    \           var data = jQuery.parseJSON(xhr.response)
    \           if (data.isStaleObjectState) {
    \             alert("Speicherung ist fehlfeschlagen!\nDaten wurden zwischenzeitlich von einem anderen User verändert.\nBitte nehmen Sie Ihre Änderungen nochmal vor.")
    \             tag.refreshData(dataJsonUrl ? dataJsonUrl : data.dataJsonUrl, false, false)
    \             modal.close();
    \             modal.destroy();
    \           } else if (data.isFormValid) {
    \             tag.refreshData(dataJsonUrl ? dataJsonUrl : data.dataJsonUrl, false, false)
    \             modal.close();
    \             modal.destroy();
    \           } else {
    \             if (progressBar)
    \               progressBar.value = 0
    \             $("#modal-form-widget").html(data.modalWidgetHtml);
    \           }
    \         } else {
    \           alert("error " + xhr.status)
    \         }
    \       }
    \     };
    \     xhr.send(formData);
    \   });
    \   modal.addFooterBtn('Cancel', 'tingle-btn tingle-btn--default tingle-btn--pull-right', function() {
    \     modal.close();
    \     modal.destroy();
    \   });
    \ }
    \ tag.showModalInfo = function(modalContentUrl) {
    \   var modal = new tingle.modal({
    \     footer: true,
    \     stickyFooter: true,
    \     cssClass: [],
    \     closeMethods: ['escape'],
    \   });
    \   $.get(modalContentUrl, function(data) {
    \     modal.setContent(data);
    \     modal.open();
    \   })
    \   modal.addFooterBtn('OK', 'tingle-btn tingle-btn--primary tingle-btn--pull-right', function() {
    \     modal.close();
    \     modal.destroy();
    \   })
    \ }
    \ tag.postRequest = function(url) {
    \   headers = {}
    \   headers[tag.data.csrfHeaderName] = tag.data.csrfToken
    \   $.ajax({
    \       url: url,
    \       type: "POST",
    \       dataType: "json",
    \       headers: headers
    \   }).done(function(data, textStatus, jqXHR) {
    \       tag.refreshData(data.dataJsonUrl, false, false)
    \   }).fail(function(jqXHR, textStatus) {
    \     if (jqXHR.status == 401)
    \       window.location.href = "@{AuthR LoginR}"
    \     else
    \       alert("error" + jqXHR.status + " ------ " + textStatus)
    \   })
    \ }
    \ i18n.setLanguage(navigator.languages[0])
    \ tag.localizeMsg = function(message) {
    \   return i18n.localise(message)
    \ }
    \ // gen i18n dict - start
    \ i18n.dictionary({
    \  "de": {
    \    "MsgGlobalHome": "Home",
    \    "MsgGlobalAdmin": "Admin",
    \    "MsgGlobalLogout": "Logout",
    \    "MsgGlobalMyProfile": "Mein profil",
    \    "MsgGlobalUsers": "Nutzer",
    \    "MsgGlobalAddUser": "Nutzer hinzufügen",
    \    "MsgGlobalEditUser": "Nutzer bearbeiten",
    \    "MsgGlobalDeleteUser": "Nutzer löschen",
    \    "MsgGlobalConfigurations": "Konfigurationen",
    \    "MsgGlobalEditConfig": "Konfiguration bearbeiten",
    \    "MsgUserIdent": "Login",
    \    "MsgUserPassword": "Passwort",
    \    "MsgUserEmail": "Email",
    \    "MsgUserIsResetPassword": "Neues Passwort generieren?",
    \    "MsgConfigCode": "Code",
    \    "MsgConfigStringValue": "String-Wert",
    \    "MsgConfigIntValue": "Integer-Wert",
    \    "MsgConfigDoubleValue": "Double-Wert",
    \    "MsgConfigBoolValue": "Boolean-Wert",
    \  },
    \  "en-US": {
    \    "MsgGlobalHome": "Home",
    \    "MsgGlobalAdmin": "Admin",
    \    "MsgGlobalLogout": "Logout",
    \    "MsgGlobalMyProfile": "My Profile",
    \    "MsgGlobalUsers": "Users",
    \    "MsgGlobalAddUser": "Add user",
    \    "MsgGlobalEditUser": "Edit user",
    \    "MsgGlobalDeleteUser": "Delete user",
    \    "MsgGlobalConfigurations": "Configurations",
    \    "MsgGlobalEditConfig": "Edit config",
    \    "MsgUserIdent": "Login",
    \    "MsgUserPassword": "Password",
    \    "MsgUserEmail": "Email",
    \    "MsgUserIsResetPassword": "Generate new password?",
    \    "MsgConfigCode": "Code",
    \    "MsgConfigStringValue": "String-Value",
    \    "MsgConfigIntValue": "Integer-Value",
    \    "MsgConfigDoubleValue": "Double-Value",
    \    "MsgConfigBoolValue": "Boolean-Value",
    \   }
    \ })
    \ // gen i18n dict - end

<nav-tag>
  <nav .uk-navbar-container .uk-margin-small-top uk-navbar>
    <div .uk-navbar-left>
      <div .uk-navbar-item .uk-logo>{parent.data.appName}
      <ul .uk-navbar-nav>
        <li each="{parent.data.mainNavItems}" class="{uk-active: isActive}">
          <a onclick="{switchNav}">
            {label}
            <span if="{badge}" .uk-badge .uk-margin-small-left>
              {badge}
    <div .uk-navbar-right>
      <ul .uk-navbar-nav>
        <li>
          <a onclick="{editMyProfile}">
            <i1-8n>MsgGlobalMyProfile
        <li>
          <a href=@{AuthR LogoutR}>
            <div>
              <i1-8n>MsgGlobalLogout
              <div .uk-navbar-subtitle>
                 {parent.data.userIdent}
  <div if="{parent.data.subNavItems.length != 0}" uk-grid>
    <div .uk-width-1-1>
      <ul .uk-subnav .uk-subnav-divider>
        <li each="{parent.data.subNavItems}" class="{uk-active: isActive}">
          <a onclick="{switchNav}">{label}
  <div .uk-child-width-expand .uk-margin-small-top .uk-margin-small-right uk-grid>
    <div .uk-width-1-1>
      <div .uk-align-right>
        <ul .uk-breadcrumb>
          <li each="{parent.data.breadcrumbItems}">
            <a onclick="{switchBreadcrumb}">{label}
  <script>
    \ switchNav(event) {
    \   parent.tag.refreshData(event.item.dataUrl, true, false)
    \ }
    \ switchBreadcrumb(event) {
    \   parent.tag.refreshData(event.item.dataUrl, true, false)
    \ }
    \ editMyProfile(event) {
    \   dataJsonUrl = window.history.state ? window.history.state.dataJsonUrl : "@{MyprojectR HomePageDataJsonR}"
    \   parent.tag.showModalForm("@{MyprojectR EditMyprofileFormR}", dataJsonUrl)
    \ }

<home-page-tag>
  <div if="{parent.data.pages.home}">
    <h1>Homepage {parent.data.pages.home.content}

<admin-page-tag>
  <div if="{parent.data.pages.admin}">
    <h1>
      <i1-8n>MsgGlobalAdmin
    <ul uk-tab>
      <li>
        <a href="#">
          <i1-8n>MsgGlobalUsers
      <li>
        <a href="#">
          <i1-8n>MsgGlobalConfigurations
    <ul class="uk-switcher uk-margin">
      <li>
        <!-- user list -->
        <table .uk-table .uk-table-small .uk-table-divider .uk-table-hover .uk-background-muted>
          <thead>
            <tr>
              <th>
                <i1-8n>MsgUserIdent
              <th>
                <i1-8n>MsgUserEmail
              <th .uk-align-right>
                <button .modal-form-link .uk-button .uk-button-link title="{localizeMsg('MsgGlobalAddUser')}" uk-tooltip onclick="{addUser}">
                  <span uk-icon="icon: plus">
          <tbody>
            <tr each="{parent.data.pages.admin.users}">
              <td .uk-table-link>
                <a onclick="{editUser}" .uk-link-reset>{entity.ident}
              <td .uk-table-link>
                <a onclick="{editUser}" .uk-link-reset>{entity.email}
              <td .uk-width-small>
                <button .uk-float-right .uk-button .uk-button-link title="{localizeMsg('MsgGlobalDeleteUser')}" uk-tooltip onclick="{deleteUser}">
                  <span uk-icon="icon: trash">
                <button .uk-float-right .uk-button .uk-button-link title="{localizeMsg('MsgGlobalEditUser')}" uk-tooltip onclick="{editUser}">
                  <span uk-icon="icon: pencil">
      <li>
        <!-- config list -->
        <table .uk-table .uk-table-small .uk-table-divider .uk-table-hover .uk-background-muted>
          <thead>
            <tr>
              <th>
                <i1-8n>MsgConfigCode
              <th>
                <i1-8n>MsgConfigStringValue
              <th>
                <i1-8n>MsgConfigIntValue
              <th>
                <i1-8n>MsgConfigDoubleValue
              <th>
                <i1-8n>MsgConfigBoolValue
              <th .uk-align-right>
          <tbody>
            <tr each="{parent.data.pages.admin.configs}">
              <td .uk-table-link>
                <a onclick="{editConfig}" .uk-link-reset>{entity.code}
              <td .uk-table-link>
                <a onclick="{editConfig}" .uk-link-reset>{entity.stringValue}
              <td .uk-table-link>
                <a onclick="{editConfig}" .uk-link-reset>{entity.intValue}
              <td .uk-table-link>
                <a onclick="{editConfig}" .uk-link-reset>{formatDouble(entity.doubleValue)}
              <td>
                <span uk-icon="icon: check" if="{ entity.boolValue }">
              <td .uk-width-small>
                <button .uk-float-right .uk-button .uk-button-link title="{localizeMsg('MsgGlobalEditConfig')}" uk-tooltip onclick="{editConfig}">
                  <span uk-icon="icon: pencil">
  <script>
    \ localizeMsg(m) {
    \    return parent.tag.localizeMsg(m)
    \ }
    \ addUser(event) {
    \   parent.tag.showModalForm("@{MyprojectR AddUserFormR}")
    \   event.currentTarget.blur()
    \ }
    \ editUser(event) {
    \   parent.tag.showModalForm(event.item.editFormUrl)
    \   event.currentTarget.blur()
    \ }
    \ deleteUser(event) {
    \   parent.tag.showModalForm(event.item.deleteFormUrl)
    \   event.currentTarget.blur()
    \ }
    \ editConfig(event) {
    \   parent.tag.showModalForm(event.item.editFormUrl)
    \   event.currentTarget.blur()
    \ }

{-# START_FILE test/Handler/CommentSpec.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Handler.CommentSpec (spec) where

import TestImport
import Data.Aeson

spec :: Spec
spec = withApp $ do
    describe "valid request" $ do
        it "gives a 200" $ do
            get HomeR
            statusIs 200

            let message = "My message" :: Text
                body = object [ "message" .= message ]
                encoded = encode body

            request $ do
                setMethod "POST"
                setUrl CommentR
                setRequestBody encoded
                addRequestHeader ("Content-Type", "application/json")

            statusIs 200

            [Entity _id comment] <- runDB $ selectList [CommentMessage ==. message] []
            assertEq "Should have " comment (Comment message Nothing)

    describe "invalid requests" $ do
        it "400s when the JSON body is invalid" $ do
            get HomeR

            let body = object [ "foo" .= ("My message" :: Value) ]

            request $ do
                setMethod "POST"
                setUrl CommentR
                setRequestBody $ encode body
                addRequestHeader ("Content-Type", "application/json")

            statusIs 400


{-# START_FILE test/Handler/CommonSpec.hs #-}
module Handler.CommonSpec (spec) where

import TestImport

spec :: Spec
spec = withApp $ do
    describe "robots.txt" $ do
        it "gives a 200" $ do
            get RobotsR
            statusIs 200
        it "has correct User-agent" $ do
            get RobotsR
            bodyContains "User-agent: *"
    describe "favicon.ico" $ do
        it "gives a 200" $ do
            get FaviconR
            statusIs 200

{-# START_FILE test/Handler/HomeSpec.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Handler.HomeSpec (spec) where

import TestImport

spec :: Spec
spec = withApp $ do

    describe "Homepage" $ do
        it "loads the index and checks it looks right" $ do
          get HomeR
          statusIs 200
          htmlAnyContain "h1" "a modern framework for blazing fast websites"

          request $ do
              setMethod "POST"
              setUrl HomeR
              addToken
              fileByLabelExact "Choose a file" "test/Spec.hs" "text/plain" -- talk about self-reference
              byLabelExact "What's on the file?" "Some Content"

          statusIs 200
          -- more debugging printBody
          htmlAllContain ".upload-response" "text/plain"
          htmlAllContain ".upload-response" "Some Content"

        -- This is a simple example of using a database access in a test.  The
        -- test will succeed for a fresh scaffolded site with an empty database,
        -- but will fail on an existing database with a non-empty user table.
        it "leaves the user table empty" $ do
          get HomeR
          statusIs 200
          users <- runDB $ selectList ([] :: [Filter User]) []
          assertEq "user table empty" 0 $ length users

{-# START_FILE test/Handler/ProfileSpec.hs #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module Handler.ProfileSpec (spec) where

import TestImport

spec :: Spec
spec = withApp $ do

    describe "Profile page" $ do
        it "asserts no access to my-account for anonymous users" $ do
            get ProfileR
            statusIs 403

        it "asserts access to my-account for authenticated users" $ do
            userEntity <- createUser "foo"
            authenticateAs userEntity

            get ProfileR
            statusIs 200

        it "asserts user's information is shown" $ do
            userEntity <- createUser "bar"
            authenticateAs userEntity

            get ProfileR
            let (Entity _ user) = userEntity
            htmlAnyContain ".username" . unpack $ userIdent user

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/TestImport.hs #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE OverloadedStrings #-}
module TestImport
    ( module TestImport
    , module X
    ) where

import Application           (makeFoundation, makeLogWare)
import ClassyPrelude         as X hiding (delete, deleteBy, Handler)
import Database.Persist      as X hiding (get)
import Database.Persist.Sql  (SqlPersistM, runSqlPersistMPool, rawExecute, rawSql, unSingle, connEscapeName)
import Foundation            as X
import Model                 as X
import Test.Hspec            as X
import Text.Shakespeare.Text (st)
import Yesod.Default.Config2 (useEnv, loadYamlSettings)
import Yesod.Auth            as X
import Yesod.Test            as X
import Yesod.Core.Unsafe     (fakeHandlerGetLogger)

runDB :: SqlPersistM a -> YesodExample App a
runDB query = do
    app <- getTestYesod
    liftIO $ runDBWithApp app query

runDBWithApp :: App -> SqlPersistM a -> IO a
runDBWithApp app query = runSqlPersistMPool query (appConnPool app)

runHandler :: Handler a -> YesodExample App a
runHandler handler = do
    app <- getTestYesod
    fakeHandlerGetLogger appLogger app handler


withApp :: SpecWith (TestApp App) -> Spec
withApp = before $ do
    settings <- loadYamlSettings
        ["config/test-settings.yml", "config/settings.yml"]
        []
        useEnv
    foundation <- makeFoundation settings
    wipeDB foundation
    logWare <- liftIO $ makeLogWare foundation
    return (foundation, logWare)

-- This function will truncate all of the tables in your database.
-- 'withApp' calls it before each test, creating a clean environment for each
-- spec to run in.
wipeDB :: App -> IO ()
wipeDB app = runDBWithApp app $ do
    tables <- getTables
    sqlBackend <- ask

    let escapedTables = map (connEscapeName sqlBackend . DBName) tables
        query = "TRUNCATE TABLE " ++ intercalate ", " escapedTables
    rawExecute query []

getTables :: DB [Text]
getTables = do
    tables <- rawSql [st|
        SELECT table_name
        FROM information_schema.tables
        WHERE table_schema = 'public';
    |] []

    return $ map unSingle tables

-- | Authenticate as a user. This relies on the `auth-dummy-login: true` flag
-- being set in test-settings.yaml, which enables dummy authentication in
-- Foundation.hs
authenticateAs :: Entity User -> YesodExample App ()
authenticateAs (Entity _ u) = do
    request $ do
        setMethod "POST"
        addPostParam "ident" $ userIdent u
        setUrl $ AuthR $ PluginR "dummy" []

-- | Create a user.  The dummy email entry helps to confirm that foreign-key
-- checking is switched off in wipeDB for those database backends which need it.
createUser :: Text -> YesodExample App (Entity User)
createUser ident = runDB $ do
    user <- insertEntity User
        { userIdent = ident
        , userPassword = Nothing
        }
    _ <- insert Email
        { emailEmail = ident
        , emailUserId = Just $ entityKey user
        , emailVerkey = Nothing
        }
    return user

